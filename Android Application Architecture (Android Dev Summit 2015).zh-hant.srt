翻譯
關閉即時翻譯
1
00：00：00,000 - > 00：00：02590


2
00：00：02590 - > 00：00：04029
ADAM POWELL：您好。

3
00：00：04030 - > 00：00：07250
因此，如同戴夫說，我們總是
多一點點風度翩翩

4
00：00：07250 - > 00：00：0.8
就正午飯後。

五
00：00：0.8 - > 00：00：10629
我們還多一點點
咖啡後，興奮的權利。

6
00：00：10629 - > 00：00：12170
所以，你趕上
我們的一個好時機。

7
00：00：12170 - > 00：00：13,960
YIGIT博伊爾：是啊，
剛喝咖啡。

8
00：00：13,960 - > 00：00：15,510
ADAM POWELL：那麼這次談話
大約是Android應用程序

9
00：00：15,510 - > 00：00：16,104
建築。

10
00：00：16,104 - > 00：00：16,770
我是亞當·鮑威爾。

11
00：00：16,770 - > 00：00：18,870
我在Android
框架團隊。

12
00：00：18,870 - > 00：00：19,270
YIGIT博伊爾：我Yigit博伊爾。

13
00：00：19,270 - > 00：00：20,890
我也是在
Android框架團隊。

14
00：00：20,890 - > 00：00：22,010
ADAM POWELL：所以這
其實去

15
00：00：22,010 - > 00：00：23770
是一點點
特別加長版

16
00：00：23770 - > 00：00：26186
我們給了一個談話的版本
今年早些時候在google I/O

17
00：00：26186 - > 00：00：28,150
而且就像所有
良好的特別版，

18
00：00：28,150 - > 00：00：30159
原始版本
不適用於視頻。

19
00：00：30,160 - > 00：00：32420
所以，你在這裡。

20
00：00：32420 - > 00：00：35360
因此，對重要的事情
應用架構

21
00：00：35360 - > 00：00：38580
是，真的，你需要採取行動
早在你的應用程序。

22
00：00：38580 - > 00：00：40,250
只要你
開始編寫代碼，

23
00：00：40,250 - > 00：00：41,750
你所做的這些
是決定

24
00：00：41,750 - > 00：00：44112
將影響您的
應用程序將是

25
00：00：44112 - > 00：00：45,320
從那裡向前發展。

26
00：00：45,320 - > 00：00：48610


27
00：00：48610 - > 00：00：51638
因此，這些決定
堅持你。

28
00：00：51639 - > 00：00：53930
這真的，真的深深
影響您的應用程序。

29
00：00：53930 - > 00：00：56120
而且我們要展示
你幾個的方法

30
00：00：56120 - > 00：00：58280
這確實影響
你可能會怎麼寫

31
00：00：58280 - > 00：01：00360
您的應用程序作為你前進。

32
00：01：00360 - > 00：01：02040
它真的讓
更容易或更難

33
00：01：02040 - > 00：01：04300
思考的問題
那你真的設置

34
00：01：04300 - > 00：01：06,860
在您的應用程序來解決。

35
00：01：06,860 - > 00：01：09876
所以，你可能會問，OK，
好了，我該使用哪種模式？

36
00：01：09876 - > 00：01：11250
有很多的
東西在那裡。

37
00：01：11250 - > 00：01：14,870
而且你可以真正得到
融入了大量的字母湯

38
00：01：14,870 - > 00：01：18170
當你開始尋找在所有
不同的規定

39
00：01：18170 - > 00：01：19930
模式，你
可以看看into--

40
00：01：19930 - > 00：01：21304
YIGIT博伊爾：我超級困惑。

41
00：01：21304 - > 00：01：23720
ADAM POWELL：是的，我的意思是，
我已經在這裡得到了所有這些事情。

42
00：01：23720 - > 00：01：25777
YIGIT博伊爾：那是
我，順便說一句。

43
00：01：25778 - > 00：01：29350
這就是我，這部動畫片。

44
00：01：29350 - > 00：01：31,580
ADAM POWELL：所以這不是
圖書館的調查。

45
00：01：31,580 - > 00：01：34190
那不是我們
這裡說說今天。

46
00：01：34190 - > 00：01：36450
真的會有很多
大圖書館在那裡。

47
00：01：36450 - > 00：01：38283
而你真的應該
看看很多人

48
00：01：38283 - > 00：01：40420
，看看他們
能為你做。

49
00：01：40420 - > 00：01：42320
和趨勢變化很快。

50
00：01：42320 - > 00：01：44820
你要去挑戰
面子是真正永恆的。

51
00：01：44820 - > 00：01：47429
一些這些屬性
我們正在編寫設備

52
00：01：47430 - > 00：01：50780
一直是相同的屬性
從第一次

53
00：01：50780 - > 00：01：53210
我們任何一個人舉行了智能手機。

54
00：01：53210 - > 00：01：55,720
真的，熔岩流
發生在一段時間。

55
00：01：55,720 - > 00：01：57810
這是一種本
現象，即，

56
00：01：57810 - > 00：02：00690
後您的代碼遍歷
一些重構的，

57
00：02：00690 - > 00：02：02940
確實沒有那種
一個總的原則

58
00：02：02940 - > 00：02：04450
這將以上
在一起了。

59
00：02：04450 - > 00：02：06556
一個新來誰
你的代碼庫

60
00：02：06556 - > 00：02：08139
可能會或可能不會
明白這是怎麼回事

61
00：02：08139 - > 00：02：11,030
在你開始打樁
所有這些不同的部分

62
00：02：11,030 - > 00：02：14,490
真的沒有
再結合在一起。

63
00：02：14,490 - > 00：02：16840
重要的外賣
從這個是建築師

64
00：02：16840 - > 00：02：18,640
對於用戶體驗。

65
00：02：18,640 - > 00：02：21,070
真的，沒有人
你的用戶群

66
00：02：21,070 - > 00：02：23359
要準確地照顧
你用什麼模式

67
00：02：23360 - > 00：02：24830
製作應用程序。

68
00：02：24830 - > 00：02：27205
他們要關心
他們有豐富的經驗

69
00：02：27205 - > 00：02：29850
同時，他們已經得到了
在他們的手中。

70
00：02：29850 - > 00：02：33527
YIGIT博伊爾：好吧，
讓我們來看一些例子。

71
00：02：33527 - > 00：02：34359
這裡也有一些視頻。

72
00：02：34 360 - > 00：02：36,430
因此，這裡的應用程序。

73
00：02：36,430 - > 00：02：37700
這很簡單。

74
00：02：37700 - > 00：02：41310
我張貼的評論
一張照片，試圖類型。

75
00：02：41310 - > 00：02：42,950
好吧，你去那裡，發送。

76
00：02：42,950 - > 00：02：43,850
而我在等待。

77
00：02：43,850 - > 00：02：45120
為什麼我在等待？

78
00：02：45120 - > 00：02：46260
我不知道。

79
00：02：46260 - > 00：02：47910
我只是在等待，等待著。

80
00：02：47910 - > 00：02：49329
好吧，它發送。

81
00：02：49330 - > 00：02：53,120
那麼，什麼是這裡的問題？

82
00：02：53,120 - > 00：02：55,700
所以，這是怎麼回事了，在
用戶點擊發送按鈕。

83
00：02：55,700 - > 00：02：59470
它到你的控制器，
進入您的網絡，

84
00：02：59470 - > 00：03：02430
網絡回來時
它要回來。

85
00：03：02430 - > 00：03：04079
然後你更新你的UI。

86
00：03：04079 - > 00：03：05870
同時，您中斷用戶
用戶因為你

87
00：03：05870 - > 00：03：06911
不知道發生了什麼。

88
00：03：06911 - > 00：03：08850
也許意見無法送過去。

89
00：03：08850 - > 00：03：11250
我們如何擺脫
這些，介入一些

90
00：03：11250 - > 00：03：13,980
你可以調用一個模型，
像是你的存儲，這

91
00：03：13,980 - > 00：03：16500
來保存你的
意見及其他一切？

92
00：03：16500 - > 00：03：18,960
於是，當用戶
點擊發送按鈕，

93
00：03：18,960 - > 00：03：22410
你把它放在你
模型，更新你的UI，

94
00：03：22410 - > 00：03：25859
然後告訴網絡
這已被添加。

95
00：03：25860 - > 00：03：29,200
而當網絡來
回來了，你可以更新你的UI。

96
00：03：29,200 - > 00：03：31739
因此，讓我們來看看
同樣的例子，這一次

97
00：03：31740 - > 00：03：33640
經過修改，看起來怎樣。

98
00：03：33640 - > 00：03：34,880
所以我來到這裡。

99
00：03：34,880 - > 00：03：37710
我鍵入我的評論--
同樣的評論

100
00：03：37710 - > 00：03：39,960
你要確認它是
同樣的用例。

101
00：03：39,960 - > 00：03：41410
我送它。

102
00：03：41410 - > 00：03：42600
我還看到了評論。

103
00：03：42600 - > 00：03：45,320
這是灰色的，
但我看到它。

104
00：03：45,320 - > 00：03：48,310
當網絡終於
回來的時候，它變成黑色。

105
00：03：48,310 - > 00：03：49850
用戶有一個線索。

106
00：03：49850 - > 00：03：51440
你可以更好地設計它。

107
00：03：51440 - > 00：03：52480
但我不能。

108
00：03：52480 - > 00：03：55,570
但是，這是個想法。

109
00：03：55,570 - > 00：03：57290
你給予即時的反饋。

110
00：03：57290 - > 00：03：59040
ADAM POWELL：您的
設計師是超棒的。

111
00：03：59040 - > 00：04：01874
請確保您
感激他們。

112
00：04：01874 - > 00：04：04290
YIGIT博伊爾：我說過，為什麼
你給我的設計工作？

113
00：04：04290 - > 00：04：06980


114
00：04：06980 - > 00：04：09670
好吧，讓我們再看一個演示。

115
00：04：09670 - > 00：04：11,519
這是同樣的小狗。

116
00：04：11,520 - > 00：04：13680
所以我一直評論
我真的很喜歡它。

117
00：04：13680 - > 00：04：14570
我一直評論。

118
00：04：14570 - > 00：04：18279
我點擊發送。

119
00：04：18279 - > 00：04：20690
OK，你會看到
它的灰色。

120
00：04：20690 - > 00：04：22329
我看到的只是響應。

121
00：04：22329 - > 00：04：22870
那很棒。

122
00：04：22870 - > 00：04：23700
它變黑。

123
00：04：23700 - > 00：04：24580
那很棒。

124
00：04：24580 - > 00：04：26109
我回到那個頁面一次。

125
00：04：26110 - > 00：04：26790
它是空的。

126
00：04：26790 - > 00：04：30300
就像，我在這裡
從字面上2秒前。

127
00：04：30300 - > 00：04：30970
我回來。

128
00：04：30970 - > 00：04：33960
我再次回來的網頁，
但評論的不存在。

129
00：04：33960 - > 00：04：35370
這是不一致的。

130
00：04：35370 - > 00：04：37960
我覺得有東西不見了。

131
00：04：37960 - > 00：04：40,750
所以，發生了什麼事嗎？

132
00：04：40,750 - > 00：04：45520
所以視圖控制器，因為我們
之前說的，告訴模型，

133
00：04：45520 - > 00：04：47750
模型告訴
網絡，它回來了，

134
00：04：47750 - > 00：04：49780
我們更新了UI--很好。

135
00：04：49780 - > 00：04：53130
但問題是
模型並沒有東西。

136
00：04：53130 - > 00：04：57380
它仍然只有
由網絡供給。

137
00：04：57380 - > 00：05：00730
如果，替代的，你如何
保持一個持久的模式嗎？

138
00：05：00730 - > 00：05：03020
這樣的想法是，你的
數據停留在客戶端上。

139
00：05：03020 - > 00：05：04880
有一些
您能永遠

140
00：05：04880 - > 00：05：0.8
存取，除非手機死機，
死機時--不能做任何事情

141
00：05：0.8 - > 00：05：09210
在這種情況下。

142
00：05：09210 - > 00：05：11320
相反，我們有一些
應用程序邏輯

143
00：05：11320 - > 00：05：14,280
作為同步網絡

144
00：05：14,280 - > 00：05：15,909
和你的持久化模型。

145
00：05：15,910 - > 00：05：18230
這真的很重要
看待這個問題

146
00：05：18230 - > 00：05：22130
作為一個同步問題
而不是進行API調用。

147
00：05：22130 - > 00：05：23,330
這簡化了很多。

148
00：05：23,330 - > 00：05：26,960
所以這個應用程序邏輯
與網絡同步，

149
00：05：26,960 - > 00：05：28789
取得您想取得的，

150
00：05：28790 - > 00：05：31700
更新模型，然後就只是通知事件--OK，

151
00：05：31700 - > 00：05：32200
我受夠了。

152
00：05：32200 - > 00：05：33,760
我做了一些改動。

153
00：05：33,760 - > 00：05：36659
嘿，伙計們，如果有人想
知道這些，他們在這裡。

154
00：05：36660 - > 00：05：39,550
然後，您的view控制器執行和取得

155
00：05：39,550 - > 00：05：41850
數據及更新的view。

156
00：05：41850 - > 00：05：43876
比方說，用戶點擊
發送按鈕。

157
00：05：43876 - > 00：05：46989
該視圖控件通知
應用程序邏輯，OK，我

158
00：05：46990 - > 00：05：48020
有這樣的評論。

159
00：05：48020 - > 00：05：50260
請發送。

160
00：05：50260 - > 00：05：52087
程序邏輯瞬間
更新磁盤。

161
00：05：52087 - > 00：05：53670
這是第一個
事情你必須做。

162
00：05：53670 - > 00：05：56420
您更新本地
存儲和告訴，嘿嘿，

163
00：05：56420 - > 00：05：57570
我更新了這條評論。

164
00：05：57570 - > 00：05：58930
我加了這條評論。

165
00：05：58930 - > 00：06：01720
它也要求網絡。

166
00：06：01720 - > 00：06：03570
現在，有兩件事情正在進行。

167
00：06：03570 - > 00：06：05680
當你正在做
網絡查詢，

168
00：06：05680 - > 00：06：07590
視圖控制器
得到通知。

169
00：06：07590 - > 00：06：10179
好吧，我有一個新的評論
要拿取，到模型去拿，

170
00：06：10,180 - > 00：06：11630
更新UI。

171
00：06：11630 - > 00：06：14,690
當網絡終於
返回時，應用程序邏輯

172
00：06：14,690 - > 00：06：16,920
更新模型
再次說，OK，

173
00：06：16,920 - > 00：06：18760
我尋求服務器發表評論。

174
00：06：18760 - > 00：06：21830
如果有任何人的資料插入，
做一點事。

175
00：06：21830 - > 00：06：25280
然後在視圖控制器執行
，再次更新視圖。

176
00：06：25280 - > 00：06：28229
所以，每一個都有
很簡單的任務。

177
00：06：28230 - > 00：06：30,960
而且他們是分離的。

178
00：06：30,960 - > 00：06：34229
所以，看看它的外觀，
當我們正確地實現它。

179
00：06：34230 - > 00：06：35.000
我來到這裡。

180
00：06：35.000 - > 00：06：35,840
它的瞬間。

181
00：06：35,840 - > 00：06：38109
因為它來自本地存儲。

182
00：06：38110 - > 00：06：41560
所以它不可能慢，除非
有某事執行得很差

183
00：06：41560 - > 00：06：45276
在您的設備，這種情形
有時會發生。

184
00：06：45276 - > 00：06：53800
好吧，再一個例子
-- OK，它在執行。

185
00：06：53800 - > 00：06：56890
所以，我太激動了，
我繼續發送意見。

186
00：06：56890 - > 00：06：58940
但他們只看到
我發送的第一個評論。

187
00：06：58940 - > 00：07：02035
-哦，好吧，
他們剛剛出現了。

188
00：07：02035 - > 00：07：03410
亞當·鮑威爾，發生什麼事?


189
00：07：03410 - > 00：07：04493
YIGIT博伊爾：我不知道。

190
00：07：04493 - > 00：07：05719
那裡發生了什麼？

191
00：07：05720 - > 00：07：08390
現在，我弄清楚
那裡發生了什麼。

192
00：07：08390 - > 00：07：09539
所以這是我的背景。

193
00：07：09540 - > 00：07：11860
因為在背景中，我有這個偉大的
池

194
00：07：11860 - > 00：07：13,750
用以處理所有的事
一件接一件一

195
00：07：13,750 - > 00：07：15730
所以，我不創建
太多線程。

196
00：07：15730 - > 00：07：18,950
所以我載入活動
來抓取bitmap工作

197
00：07：18,950 - > 00：07：22280
來抓照片，和
另一個加載評論

198
00：07：22280 - > 00：07：23479
從磁碟上。

199
00：07：23480 - > 00：07：24,910
所以，我有兩個執行器。
 
200
00：07：24,910 - > 00：07：25,840
他們開始運行。

201
00：07：25,840 - > 00：07：29099
同時，該用戶啟動
濫發我的應用程序

202
00：07：29100 - > 00：07：31930
用這些新的評論。

203
00：07：31930 - > 00：07：33500
我在評論中完成了它。

204
00：07：33500 - > 00：07：34440
其他的來。

205
00：07：34440 - > 00：07：36,480
我們把評論放到磁盤。

206
00：07：36,480 - > 00：07：38870
現在，我們正在努力
將其發送給服務器。

207
00：07：38870 - > 00：07：40780
同時，
網絡實在是太差了。

208
00：07：40780 - > 00：07：43640
因此，取bitmap
作業仍在運行。

209
00：07：43640 - > 00：07：45760
視圖控制器
得到通知

210
00：07：45760 - > 00：07：48780
有新的評論，
要刷新自己。

211
00：07：48780 - > 00：07：52080
但queue已經滿了。

212
00：07：52080 - > 00：07：52680
我在用著。

213
00：07：52680 - > 00：07：55000
然後，作業無法運行。

214
00：07：55000 - > 00：07：57010
因此，用戶界面是不
更新，因為我

215
00：07：57010 - > 00：07：58770
試圖獲取一個位圖。

216
00：07：58770 - > 00：07：59370
這不好。

217
00：07：59370 - > 00：07：59870
這不好。

218
00：07：59870 - > 00：08：02210
這意味著
優先順序是不好的。

219
00：08：02210 - > 00：08：03430
但它是很難知道的。

220
00：08：03430 - > 00：08：05290
你不知道如何
長時間工作需要。

221
00：08：05290 - > 00：08：07790
你無法估計
這一切的時候。

222
00：08：07790 - > 00：08：11100
但是你可以做的是
分開這些東西。

223
00：08：11100 - > 00：08：14,320
所以，如果我有一個不同的
queue用以等待我的網絡任務，

224
00：08：14,320 - > 00：08：16980
和不同的queue給
我的本地任務，

225
00：08：16980 - > 00：08：20080
當我的網絡瘋瘋癲癲的
，我的應用程序

226
00：08：20080 - > 00：08：21229
仍然可以回應。

227
00：08：21230 - > 00：08：23090
因為它們是從不影響。

228
00：08：23090 - > 00：08：26760
所以，如果我們在
進行同樣的作業

229
00：08：26760 - > 00：08 29000
分別比上
中心，你可以看到現在，

230
00：08 29000 - > 00：08：32210
他們進入
不同的線程。

231
00：08：32210 - > 00：08：33809
並且局部測試
queue只是不斷

232
00：08：33808 - > 00：08：36319
運行因為磁盤是正常的。

233
00：08：36320 - > 00：08：38835
由於我們無法取得
bitmap，我們無法更新。

234
00：08：38835 - > 00：08：40460
我們無法發送評論
到服務器。

235
00：08：40460 - > 00：08：44777
但誰在乎?--用戶
依然可看到它。

236
00：08：44777 - > 00：08：47850
如果我們進行改變
變，那麼，你

237
00：08：47850 - > 00：08：49980
看到一切正在發送。

238
00：08：49980 - > 00：08：52860
而且，它得到的時間
運行服務器作業，

239
00：08：52860 - > 00：08：54720
我們正看到
他們開始變黑

240
00：08：54720 - > 00：08：57069
從頂部，一個接一個。

241
00：08：57069 - > 00：08：58360
他們最終將被同步。

242
00：08：58360 - > 00：09：01370


243
00：09：01370 - > 00：09：04370
因此，反饋之一，我們
拿到後[聽不清]是，OK，

244
00：09：04370 - > 00：09：06640
但activity
如何得到通知？

245
00：09：06640 - > 00：09：10220
所以activity是一個非常，
很簡單的狀態機

246
00：09：10220 - > 00：09：11,770
在這種情況下。

247
00：09：11,770 - > 00：09：14319
當它被創建(onCreate)，
你設置你的UI。

248
00：09：14,320 - > 00：09：16170
這就是你所有要做的。

249
00：09：16170 - > 00：09：19,050
當你開始(onStart)，你
為你想知道的事件進行註冊

250
00：09：19,050 - > 00：09：20,160


251
00：09：20,160 - > 00：09：21969
並且加載數據。

252
00：09：21970 - > 00：09：25,210
這是確保
在重新啟動間

253
00：09：25,210 - > 00：09：27302
或什麼的，如果有
有一些你錯過的事件，

254
00：09：27302 - > 00：09：28260
你永遠不會想念他們。

255
00：09：28260 - > 00：09：30,050
因為在onStart，
您註冊

256
00：09：30,050 - > 00：09：33,040
並刷新您的數據。

257
00：09：33,040 - > 00：09：36584
而當事件來臨的時候，
只刷新您的數據。

258
00：09：36585 - > 00：09：38610
這就像同一
事情一遍又一遍。

259
00：09：38610 - > 00：09：41240
OnStop--不
刷新您的數據。

260
00：09：41240 - > 00：09：43170
您只要註銷事件。

261
00：09：43170 - > 00：09：44880
所以，你的生命週期
很簡單。

262
00：09：44880 - > 00：09：46135
像，出現這種情況，我這樣做。

263
00：09：46135 - > 00：09：47134
出現這種情況，我這樣做。

264
00：09：47134 - > 00：09：50520
這使得測試更容易
，更穩定，更

265
00：09：50520 - > 00：09：52980
更容易理解。

266
00：09：52980 - > 00：09：54340
好了，換你了，亞當。

267
00：09：54340 - > 00：10：00330
ADAM POWELL：好的，所以
從所有的演示把關鍵取出

268
00：10：00330 - > 00：10：02,280
我們剛才看到
有，真的，你

269
00：10：02,280 - > 00：10：04319
需要為離線進行設計。

270
00：10：04320 - > 00：10：07190
總是假設
網絡是不是你的朋友。

271
00：10：07190 - > 00：10：08510
是緩慢的。

272
00：10：08510 - > 00：10：11,145
如果你想傳遞
良好的用戶體驗，

273
00：10：11,145 - > 00：10：13,520
你真的不能只怪
網絡

274
00：10：13,520 - > 00：10：14689
是不是在彈出很快。

275
00：10：14,690 - > 00：10：16170
該表賭注
真的有

276
00：10：16170 - > 00：10：19500
提出這個時
談到移動。

277
00：10：19500 - > 00：10：23700
因此，要解決這個問題，回到
你的UI及本地模型

278
00：10：23700 - > 00：10：25280
並用另一只
應用程序邏輯

279種
00：10：25280 - > 00：10：27,750
來同步的模型和
服務器而不是做

280
00：10：27,750 - > 00：10：29420
而不是像即時的API調用。

281
00：10：29420 - > 00：10：3​​2540
那可真是誘人
試圖優化的情況下

282
00：10：3​​2540 - > 00：10：3​​5343
你想要的數據新鮮度
高於一切，不論你在哪裡

283
00：10：3​​5,344個 - > 00：10：3​​7260
真的不希望
任何顯示給用戶

284
00：10：3​​7260 - > 00：10：3​​9430
除非你真的，
真的知道它。

285
00：10：3​​9430 - > 00：10：41160
但是，這是一個
這些東西的地方，

286
00：10：41160 - > 00：10：44930
如果您假設可能成功
與假設可能失敗，

287
00：10：44930 - > 00：10：48671
那麼什麼類型的要求是
你真的要做的

288
00：10：48672 - > 00：10：50130
關於軟件
當你承擔

289
00：10：50130 - > 00：10：52120
在通常情況下失敗？

290
00：10：52120 - > 00：10：54090
我的意思是，你的軟件
要能工作，對不對？

291
00：10：54090 - > 00：10：56150
您的服務器將
回來的答案

292
00：10：56150 - > 00：10：57620
你預期的，對不對？

293
00：10：57620 - > 00：10：58990
因此，優化這些情況。

294
00：10：58990 - > 00：10：59850
預測它。

295
00：10：59850 - > 00：11：02149
它顯示給用戶早期。

296
00：11：02149 - > 00：11：04190
YIGIT博伊爾：順便問一下，
我昨天剛剛學會

297
00：11：04190 - > 00：11：07890
有一個厲害的新名稱
叫做樂觀渲染。

298
00：11：07890 - > 00：11：11,290
我覺得現在是
所謂樂觀渲染。

299
00：11：11,290 - > 00：11：14429
ADAM POWELL：是啊，
你看這個原則

300
00：11：14429 - > 00：11：16,720
在很多其他工作
軟件開發領域的

301
00：11：16,720 - > 00：11：17,220
也是。

302
00：11：17,220 - > 00：11：19580
遊戲是一個真正
突出的例子

303
00：11：19580 - > 00：11：22720
那裡有很多網絡
延遲補償

304
00：11：22720 - > 00：11：25940
在多人遊戲系統
基於這一原理。

305
00：11：25940 - > 00：11：28380
他們預測基於
上發生了什麼

306
00：11：28380 - > 00：11：31,010
在先前已知的
從網絡狀態。

307
00：11：31,010 - > 00：11：35800
所以，你可以使用這些相同
想法在你自己的應用程序。

308
00：11：35800 - > 00：11：38910
因此，確保這些
事情不一定

309
00：11：38910 - > 00：11：41630
彼此依賴，除非
這是一個非常鬆散的方式。

310
00：11：41630 - > 00：11：43040
利用事件和
回調和這樣的

311
00：11：43040 - > 00：11：45382
在需要的時候通知
你的系統的其他部分

312
00：11：45382 - > 00：11：46589
- 這就是改變的狀態。

313
00：11：46590 - > 00：11：50710


314
00：11：50710 - > 00：11：53,200
所以大家總是問我們
有關依賴注入

315
00：11：53,200 - > 00：11：53820


316
00：11：53820 - > 00：11：54360
是好？

317
00：11：54360 - > 00：11：55270
是壞？

318
00：11：55270 - > 00：11：56107
我應該使用什麼？

319
00：11：56107 - > 00：11：57189
我應該使用什麼庫？

320
00：11：57190 - > 00：11：59130
嗯，我的意思是，用
它，假如它有幫助。

321
00：11：59130 - > 00：12：00670
任何事物都有一個成本。

322
00：12：00670 - > 00：12：03608
所以知道的副作用
它是什麼，你正在做的

323
00：12：03609 - > 00：12：05150
而且它是什麼，
你在其中。

324
00：12：05150 - > 00：12：07280
這是非常，非常容易
包括一個新的依賴

325
00：12：07280 - > 00：12：08310
在應用程序中。

326
00：12：08310 - > 00：12：10560
這不是容易看到
成本的

327
00：12：10560 - > 00：12：12430
將要在運行時，
尤其是當你只是

328
00：12：12430 - > 00：12：13,770
在你的辦公桌台架測試。

329
00：12：13,770 - > 00：12：16228
一切都在最佳
當你坐在那裡情況

330
00：12：16228 - > 00：12：17,219
在你的辦公桌。

331
00：12：17,220 - > 00：12：20,950
因此，避免用較好的性能來反應程序的情形。

332
00：12：20,950 - > 00：12：22860
許多依賴性注入框架

333
00：12：22860 - > 00：12：25,550
有一個沉重的運行時組件
與編譯時

334
00：12：25,550 - > 00：12：26170
組件。

335
00：12：26170 - > 00：12：28641
一些系統，像是Dagger2
在編譯的時候，這樣做

336
00：12：28641 - > 00：12：31140
它最終被最佳化為你的應用程序。

337
00：12：31140 - > 00：12：33530
所以看看裡頭並了解
權衡交換了什麼。

338
00：12：33530 - > 00：12：36180


339
00：12：36180 - > 00：12：39,680
當涉及到網絡，
所以我們談到了其他的事情

340
00：12：39,680 - > 00：12：40319
我們能做到。

341
00：12：40,320 - > 00：12：44480
總是假定網絡
將是緩慢的，janky。

342
00：12：44480 - > 00：12：46610
總是假設
你有你的手機

343
00：12：46610 - > 00：12：48760
在會議中間
與擁擠的Wi-Fi

344
00：12：48760 - > 00：12：50930
完全
抨擊手機信號塔。

345
00：12：50930 - > 00：12：53729
在這基本的情況下
便是你想要優化的部份。

346
00：12：53730 - > 00：12：55896
因為此時人們會注意到這件事

347
00：12：55896 - > 00：12：57,920
您的應用程序是壞的，當沒有網路時。

348
00：12：57,920 - > 00：13：00209
所以，你的API設計
在網絡層

349
00：13：00210 - > 00：13：02540
也受到同樣的影響。

350
00：13：02540 - > 00：13：05699
因此，為你的客戶設計您的後端
，而不是其他的方式

351
00：13：0.57 - > 00：13：06556
周圍。

352
00：13：06556 - > 00：13：09180
這是其中的一件事情
這聽起來真時明顯

353
00：13：09180 - > 00：13：10469
你在這裡說出來。

354
00：13：10,470 - > 00：13：13784
但是當你開始建立服務器
後端的這些東西，

355
00：13：13784 - > 00：13：15200
你開始暴露
件你

356
00：13：15200 - > 00：13：16820
可根據需要，等等，等等。

357
00：13：16820 - > 00：13：20210
而真正開始建設
它作為一系列的層。

358
00：13：20210 - > 00：13：22,970
所以，你必須非常
低級別組件

359
00：13：22,970 - > 00：13：24804
提供您的數據，
如網絡。

360
00：13：24804 - > 00：13：26678
然後你有
更高級別的組件

361
00：13：26678 - > 00：13：28010
提供演示。

362
00：13：28010 - > 00：13：30830
而且它是非常誘人的不
有較高水平的通知

363
00：13：30830 - > 00：13：32180
較低級別的設計。

364
00：13：32180 - > 00：13：35280
但你可以得到很多
通過這樣的勝利。

365
00：13：35280 - > 00：13：37630
此外，過程盡可能多
你可以在服務器上

366
00：13：37630 - > 00：13：38590
一邊開始。

367
00：13：38590 - > 00：13：39992
你有這些
大，仡服務器

368
00：13：39992 - > 00：13：41949
在雲中，可以做
很多關於你的工作。

369
00：13：41950 - > 00：13：46430
不能卸載的東西到
客戶端，你就不必。

370
00：13：46430 - > 00：13：49430
更具體地，傳遞中介資料到客戶端。

371
00：13：49430 - > 00：13：51,900
這是值得
可以說真的，真正提高

372
00：13：51,900 - > 00：13：52930
您的用戶體驗。

373
00：13：52930 - > 00：13：55520
如果你有一個
大的BLOB數據，

374
00：13：55520 - > 00：13：58220
如大照片，那
你要去拉下

375
00：13：58220 - > 00：14：02330
作為同步某種一部分
社群應用的，例如，

376
00：14：02330 - > 00：14：04230
你知道些什麼
這一形象在當時

377
00：14：04230 - > 00：14：07640
你已經提出這項要求
並得到這種反應回來嗎？

378
00：14：07640 - > 00：14：08910
好了，不是一大堆。

379
00：14：08910 - > 00：14：11,285
那麼，你要告訴
而加載，當你

380
00：14：11,285 - > 00：14：13,389
真正去獲取這種形象？

381
00：14：13,389 - > 00：14：15430
更好的情況下將
沿著一點點通

382
00：14：15430 - > 00：14：16,569
更多的元數據。

383
00：14：16570 - > 00：14：19741
給你的應用程序的一些
暗示它需要成功。

384
00：14：19741 - > 00：14：21740
在這種情況下，我們傳遞
的寬度和高度

385
00：14：21740 - > 00：14：25,250
這一形象提前之前
我們去抓取圖像本身。

386
00：14：25,250 - > 00：14：28300
這使我們能夠完美
大小我們的UI一個佔位符

387
00：14：28300 - > 00：14：31,030
這樣你就沒有你
UI來回跳躍

388
00：14：31,030 - > 00：14：32980
當用戶滾動
通過或企圖

389
00：14：32980 - > 00：14：34910
向來回移動。

390
00：14：34910 - > 00：14：36910
我們還傳承下去
一些調色板信息

391
00：14：36910 - > 00：14：40,100
這裡只是為了能夠給
我們的UI多一點點

392
00：14：40,100 - > 00：14：43170
色彩飛濺的那
保持圖像的味道

393
00：14：43170 - > 00：14：45180
我們其實之前
有真正的位。

394
00：14：45180 - > 00：14：48250


395
00：14：48250 - > 00：14：50021
電池和數據 -
這是另一個問題

396
00：14：50021 - > 00：14：52270
你已經有了，只要
你說的網絡

397
00：14：52270 - > 00：14：53811
為好，特別
當你做

398
00：14：53811 - > 00：14：55390
任何一種背景同步的。

399
00：14：55390 - > 00：14：58120
批次您的要求
越多越好。

400
00：14：58120 - > 00：15：00070
現在，我們提供
很多其他工具

401
00：15：00070 - > 00：15：03420
在最近Android版本
以幫助您有效地做到這一點。

402
00：15：03420 - > 00：15：05880
像是Doze與Marshmallow
棉花糖都是很好的例子。

403
00：15：05880 - > 00：15：07970
Doze會做很多
這個給你。

404
00：15：07970 - > 00：15：10930
不過說真的，不要僅僅依賴
上作為唯一的辦法

405
00：15：10930 - > 00：15：11,890
的處理與此有關。

406
00：15：11,890 - > 00：15：13,400
Doze本質
最後一行

407
00：15：13,400 - > 00：15：15160
防禦為的
用戶在這一點上。

408
00：15：月薪在15,160 - > 00：15：16,930
使用作業調度程序
當它是有道理的。

409
00：15：16,930 - > 00：15：19130
給Android作為多
有關哪些

410
00：15：19130 - > 00：15：21237
它是你的應用程序是
實際上是試圖做的。

411
00：15：21237 - > 00：15：22819
而這樣一來，Android的
可以作出更明智

412
00：15：22820 - > 00：15：26870
有關如何決策
最好，以優化。

413
00：15：26870 - > 00：15：30700
這裡的關鍵是
作用於本地，同步在網路。

414
00：15：30700 - > 00：15：34100
你真的想給用戶
一個非常快的，非常敏感

415
00：15：34100 - > 00：15：37100
本地經驗，每當
他們使用你的應用程序。

416
00：15：37100 - > 00：15：39,950
然後確保你
保持在同步與雲

417
00：15：39,950 - > 00：15：43275
幾乎在事後
與演示文稿進行比較

418
00：15：43275 - > 00：15：44400
你試圖給。

419
00：15：44400 - > 00：15：46797


420
00：15：46797 - > 00：15：48380
因此，沒有通話
應用架構

421
00：15：48380 - > 00：15：49838
將完成
如果沒有某種形式

422
00：15：49838 - > 00：15：53319
這個問題的解決
的活動和碎片。

423
00：15：53320 - > 00：15：56610
這是值得我們
不斷獲得有關的問題，

424
00：15：56610 - > 00：15：57810
甚至在谷歌。

425
00：15：57810 - > 00：16：00530
我們會得到的問題，比如，OK，
好了，我應該使用活動

426
00：16：00530 - > 00：16：02,280
或者我應該使用片段
建立我的應用程序？

427
00：16：02,280 - > 00：16：04790
這就像，嗯，
那不完全

428
00：16：04790 - > 00：16：07,300
讓一大堆
感質疑。

429
00：16：07,300 - > 00：16：09250
片段是真的
只是封裝部件

430
00：16：09250 - > 00：16：09990
的活性。

431
00：16：09990 - > 00：16：13441
所以，當你建立
您的應用程序，

432
00：16：13441 - > 00：16：15190
當你的活動
開始變得太大，

433
00：16：15190 - > 00：16：16430
你需要
開始打破它了

434
00：16：16430 - > 00：16：18339
所以你仍然可以認為
它有效，

435
00：16：18340 - > 00：16：20631
這是一個偉大的時間來打破
它分解成一些片斷。

436
00：16：20631 - > 00：16：23207
或者，如果你通過建設啟動
單片段那種

437
00：16：23207 - > 00：16：25165
的組合在一起
比多一點

438
00：16：25165 - > 00：16：27309
讓你保持你的
關注分離，

439
00：16：27309 - > 00：16：29100
這可以幫助保持
東西多一點

440
00：16：29100 - > 00：16：30475
直在你的
頭，讓你

441
00：16：30475 - > 00：16：33,310
不與這些結束
巨神的活動課。

442
00：16：33,310 - > 00：16：35880
碎片和觀點
另外一個，我們得到了很多。

443
00：16：35880 - > 00：16：37590
現在，這是
我們所講的東西

444
00：16：37590 - > 00：16：39360
有關頗有幾分上
該框架團隊

445
00：16：39360 - > 00：16：41890
在的一個方面
幾乎遺憾

446
00：16：41890 - > 00：16：43710
片段的
在這一點上的API

447
00：16：43710 - > 00：16：46130
是你已經有了這個方便
小標籤，你可以只

448
00：16：46130 - > 00：16：48070
堅守在你的佈局，
說，片段，並說，

449
00：16：48070 - > 00：16：49400
繼續前進，
實例化一個片段

450
00：16：49400 - > 00：16：51699
而在這裡，在堅持下去
我的佈局，當我它充氣。

451
00：16：51700 - > 00：16：53533
這個東西真的是，
真的很方便。

452
00：16：53533 - > 00：16：55430
它使偉大的代碼
示例和演示，

453
00：16：55430 - > 00：16：58,300
因為你可以做的事情
像有那支佈局

454
00：16：58,300 - > 00：16：59630
兩個片段並排。

455
00：16：59630 - > 00：17：02820
然後你旋轉
裝置，並且它堅持他們

456
00：17：02820 - > 00：17：04252
堆疊在彼此的頂部。

457
00：17：04252 - > 00：17：05210
你說，嘿，看看。

458
00：17：05210 - > 00：17：07430
看看這個偉大的解耦
系統，我已經得到了。

459
00：17：07430 - > 00：17：10,329
它使夢幻般的演示。

460
00：17：10,329 - > 00：17：12139
但實際上，
這使得人們

461
00：17：12,140 - > 00：17：15,510
想到片段作為是
視圖構建自己。

462
00：17：15,510 - > 00：17：16980
真的，他們那種不是。

463
00：17：16980 - > 00：17：19839
因此，他們住在這些
非常不同的世界。

464
00：17：19839 - > 00：17：22,310
所以，觀點真的是
堅果和您的用戶界面的螺栓

465
00：17：22,310 - > 00：17：24929
你正在構建，而
活動片段

466
00：17：24,930 - > 00：17：27069
生命週期結構
基本上提供

467
00：17：27069 - > 00：17：30710
接觸的外掛點
與系統的其餘部分

468
00：17：30710 - > 00：17：33880
告訴你這是怎麼回事。

469
00：17：33880 - > 00：17：35,740
很多次，
你會想

470
00：17：35,740 - > 00：17：38560
同時使用，以保持這些
職責明確。

471
00：17：38560 - > 00：17：40700
正如Yigit提到
早些時候，你

472
00：17：40700 - > 00：17：43,560
將要使用的
這些信號，你

473
00：17：43,560 - > 00：17：46990
從您的活動得到和，
在與該結合，

474
00：17：46990 - > 00：17：50,560
通過您的片段作為
好吧，如果你正在使用的，

475
00：17：50,560 - > 00：17：53389
基本上通知您何時
要註冊，註銷

476
00：17：53390 - > 00：17：56420
事件，等等，等等。

477
00：17：56420 - > 00：17：58920
但是，意見確實應該
自己的封裝件

478
00：17：58920 - > 00：18：00503
從獨立
被控制

479
00：18：00503 - > 00：18：01629
由這些構建體。

480
00：18：01630 - > 00：18：04320


481
00：18：04320 - > 00：18：07550
好了，一起移動到另一個
爭論的話題下意識的

482
00：18：07550 - > 00：18：09280
記憶。

483
00：18：09280 - > 00：18：11,330
所以，這是後話
我們談了很多。

484
00：18：11,330 - > 00：18：13,199
如果你看過
任何柯爾特的會談

485
00：18：13200 - > 00：18：14,840
在Android
表現手法，

486
00：18：14,840 - > 00：18：16639
你已經看到了其中的一些。

487
00：18：16640 - > 00：18：19090
避免分配對象
在炎熱的代碼路徑。

488
00：18：19090 - > 00：18：21300
施壓
GC的是沒有那麼大。

489
00：18：21300 - > 00：18：23210
藝術是好多了
在這這些天

490
00：18：23210 - > 00：18：25670
比Android用於
處於這一切。

491
00：18：25670 - > 00：18：28050
但還是有很多
這些設備在野外。

492
00：18：28050 - > 00：18：31220
如果你在看這個
一些敏感的代碼路徑，

493
00：18：31220 - > 00：18：33200
那麼你要
結束了一點點

494
00：18：33200 - > 00：18：34300
一個流暢的體驗。

495
00：18：34300 - > 00：18：35883
所以，你可以和池
重用一些對象

496
00：18：35883 - > 00：18：37160
當你衡量一個問題。

497
00：18：37160 - > 00：18：38910
這最後一部分是
真的key--

498
00：18：38910 - > 00：18：40064
當你衡量一個問題。

499
00：18：40064 - > 00：18：42480
請確保你測量
這些事情在你走之前

500
00：18：42480 - > 00：18：45,150
和扭曲的
你的系統內部。

501
00：18：45,150 - > 00：18：48036
而這些的種類
東西的地方，有些事情，你

502
00：18：48036 - > 00：18：49660
可以做出一些決定
早期即會

503
00：18：49660 - > 00：18：52,260
幫助你進入
這些優化

504
00：18：52,260 - > 00：18：53410
如果你需要他們。

505
00：18：53410 - > 00：18：55659
有些東西，它
其實並不重要。

506
00：18：55659 - > 00：18：57,700
所以寫代碼的方式
它的第一個更清晰

507
00：18：57,700 - > 00：18：59630
再後來優化。

508
00：18：59630 - > 00：19：01721
所以GC還是那種
保持你的敵人，

509
00：19：01721 - > 00：19：03470
特別是在一些
這些舊設備，

510
00：19：03470 - > 00：19：05886
即使在垃圾收集器
在Android中得到好得多。

511
00：19：05886 - > 00：19：09195


512
00：19：09195 - > 00：19：13,110
因此，如何一個很好的例子
這可能會影響您的API設計

513
00：19：13,110 - > 00：19：15756
internally--只是
更小的組件。

514
00：19：15757 - > 00：19：18,090
現在，有什麼區別
這兩種方法之間？

515
00：19：18,090 - > 00：19：22610
好了，上面的一個可以說是
更地道，更清潔。

516
00：19：22610 - > 00：19：25459
你可以做一些假設
關於它的好不好，好條件，

517
00：19：25,460 - > 00：19：27980
它返回的對象
是希望安全

518
00：19：27980 - > 00：19：29,950
如果這是一個可變
對象開始。

519
00：19：29,950 - > 00：19：32,250
但為了
這是真實的，那麼

520
00：19：32,250 - > 00：19：34890
此getter必須是
分配一個新的矩形對我來說

521
00：19：34890 - > 00：19：35870
它返回。

522
00：19：35870 - > 00：19：37780
好了，現在我們已經得到了分配。

523
00：19：37780 - > 00：19：40,480
所以，你在哪裡
最終使用的？

524
00：19：40,480 - > 00：19：43970
與第二種形式在這裡，
它基本上只是把

525
00：19：43970 - > 00：19：46694
輸入參數，該
方法是要填寫。

526
00：19：46694 - > 00：19：48110
你知道，
第二個是不

527
00：19：48110 - > 00：19：51081
要執行任何其他
分配在這種情況下。

528
00：19：51082 - > 00：19：52790
這是何許
的事情，你真的

529
00：19：52790 - > 00：19：55129
只想擔心
極熱的代碼路徑。

530
00：19：55130 - > 00：19：58010
我們談論的佈局，
運行得到很多很多次。

531
00：19：58010 - > 00：20：01022
我們談論繪圖
獲取運行每秒60次。

532
00：20：01022 - > 00：20：02480
如果你在談論
有關的事情，

533
00：20：02480 - > 00：20：04104
發生在計
你的事件處理程序，

534
00：20：04104 - > 00：20：05970
像點擊數等
上，等等，

535
00：20：05970 - > 00：20：08160
你真的不需要
是被扭曲你的系統

536
00：20：08160 - > 00：20：09040
這麼多的內部。

537
00：20：09040 - > 00：20：12,090


538
00：20：12,090 - > 00：20：15179
但對於非常小
你的代碼的百分比，

539
00：20：15180 - > 00：20：18170
它是確定寫醜陋的代碼
如果它可以幫助你的用戶。

540
00：20：18170 - > 00：20：19920
您的用戶不是
要看到你的代碼。

541
00：20：19920 - > 00：20：21,760
他們會看到你的用戶界面。

542
00：20：21,760 - > 00：20：24879
如果你的UI是醜陋的，因為
它的表現不好，

543
00：20：24,880 - > 00：20：26,520
那麼這件事情
他們就看見了。

544
00：20：26,520 - > 00：20：30570
這東西真的
會影響他們的經驗。

545
00：20：30570 - > 00：20：34450
性能關鍵代碼
真的是不佔多數。

546
00：20：34450 - > 00：20：37,040
，那麼，所有的編譯代碼
長相醜陋最終反正。

547
00：20：37,040 - > 00：20：40030


548
00：20：40030 - > 00：20：42320
所以這樣，我們是
要搬過來

549
00：20：42320 - > 00：20：44870
另一個演示的那種
帶來了一堆的這些想法

550
00：20：44870 - > 00：20：45419
一起。

551
00：20：45,420 - > 00：20：47910
YIGIT博伊爾：好吧，
在I / O說話後不久，

552
00：20：47910 - > 00：20：51610
我們收到的反饋之一
了，OK，談這些事情，

553
00：20：51610 - > 00：20：54570
但給我一些代碼。

554
00：20：54570 - > 00：20：56929
所以這一次，我們寫
這個示例應用程序。

555
00：20：56930 - > 00：20：59240
請記住，這是
樣本意義。

556
00：20：59240 - > 00：21：01910
而主要焦點
這是，你怎麼了

557
00：21：01910 - > 00：21：04450
看待這個問題更多的
同步問題？

558
00：21：04450 - > 00：21：06970
你如何設計一個
應用程序離線工作？

559
00：21：06970 - > 00：21：10,080
而我們要
釋放的源代碼。

560
00：21：10,080 - > 00：21：13,250
我只是在等待
對於一些審批。

561
00：21：13,250 - > 00：21：14,520
因此，這裡是我的應用程序。

562
00：21：14,520 - > 00：21：17,550
我只是失去了我的Chrome。

563
00：21：17,550 - > 00：21：18070
好吧。

564
00：21：18070 - > 00：21：19,320
讓我們來這裡。

565
00：21：19,320 - > 00：21：20570
所以這是一個真正的應用程序。

566
00：21：20570 - > 00：21：22649
有一個真正的服務器
我的計算機上運行

567
00：21：22650 - > 00：21：25680
只是為
演示的目的。

568
00：21：25680 - > 00：21：29780
並且應用程序
只是一個帖子列表。

569
00：21：29780 - > 00：21：31310
大家好，我可以說。

570
00：21：31310 - > 00：21：33,050
我可以說，每一個人。

571
00：21：33,050 - > 00：21：36659


572
00：21：36660 - > 00：21：37870
那麼如何工作的呢？

573
00：21：37870 - > 00：21：40110
所以，讓我們做一些危險的。

574
00：21：40110 - > 00：21：42490
而且這不是很危險。

575
00：21：42490 - > 00：21：45060
我會做更危險
事情以後再說。

576
00：21：45060 - > 00：21：47629
所以，我只是禁用網絡。

577
00：21：47630 - > 00：21：51640
我送一個。

578
00：21：51640 - > 00：21：55370
所以，現在，請
原諒我的UI。

579
00：21：55370 - > 00：21：59004
因此，有一個上傳俱樂部
文本的右下角

580
00：21：59005 - > 00：22：03540
告訴用戶，這是
不一樣的其他的。

581
00：22：03540 - > 00：22：05080
這幾乎要發送。

582
00：22：05080 - > 00：22：07189
它現在還沒有，
所以如果我真的

583
00：22：07190 - > 00：22：08342
看看我的真正的服務器。

584
00：22：08342 - > 00：22：14410
而我的應用程序時，
網絡恢復，

585
00：22：14410 - > 00：22：16030
它最終將它張貼。

586
00：22：16030 - > 00：22：18600
而這將更新UI。

587
00：22：18600 - > 00：22：21745
現在，用一些其它實施例
我們在前面的時間 - 看見

588
00：22：21745 - > 00：22：23770
實際上，我們可以
使服務器崩潰了。

589
00：22：23770 - > 00：22：25566
所以，現在的服務器
不再運行。

590
00：22：25566 - > 00：22：29560


591
00：22：29560 - > 00：22：33270
因此，對於這個演示中，我有一個
很簡單的回退時間。

592
00：22：33270 - > 00：22：36057
但它會嘗試後退。

593
00：22：36057 - > 00：22：37640
亞當·鮑威爾，我的意思是，
它確實哭了。

594
00：22：37640 - > 00：22：38,800
YIGIT博伊爾：這些是
我application--是啊，

595
00：22：38,800 - > 00：22：39780
它哭了起來。

596
00：22：39780 - > 00：22：41537
這些是我的
應用程序日誌在這裡。

597
00：22：41537 - > 00：22：44120
它實際上是不斷嘗試後
它，因為有網絡。

598
00：22：44120 - > 00：22：46300
這只是
服務器崩潰。

599
00：22：46300 - > 00：22：51870
現在我終於把
服務器up--哎呀，

600
00：22：51870 - > 00：22：55929
不是這樣的，不是這樣的。

601
00：22：55930 - > 00：22：59860
好了，它開始釜底抽薪。

602
00：22：59860 - > 00：23：02097
它最終將發
到服務器的註釋。

603
00：23：02097 - > 00：23：02680
它死在那裡。

604
00：23：02680 - > 00：23：04250
它使重試。

605
00：23：04250 - > 00：23：06060
是的，它並發送。

606
00：23：06060 - > 00：23：11,298
因此，讓我們做一個更多情況
我們再次崩潰的服務器。

607
00：23：11,298 - > 00：23：15190


608
00：23：15190 - > 00：23：17,950
好了，多一個comment--
一樣的。

609
00：23：17,950 - > 00：23：19840
哦，等等，它並沒有崩潰。

610
00：23：19840 - > 00：23：21205
對不起，我崩潰了記錄。

611
00：23：21205 - > 00：23：24530


612
00：23：24530 - > 00：23：26,750
因此，我們在墜毀
服務器這一次。

613
00：23：26,750 - > 00：23：28,150
你看，應用程序的工作。

614
00：23：28,150 - > 00：23：30420
ADAM POWELL：你寫了一個服務器
這並不甚至崩潰的權利。

615
00：23：30420 - > 00：23：31670
來吧，我們有什麼在這裡？

616
00：23：31670 - > 00：23：34165


617
00：23：34165 - > 00：23：36540
YIGIT博伊爾：應該崩潰
為演示的目的。

618
00：23：36540 - > 00：23：38490
我希望你的服務器不會崩潰。

619
00：23：38490 - > 00：23：39910
於是我給更多的一條評論。

620
00：23：39910 - > 00：23：43510
然後，我只是出去。

621
00：23：43510 - > 00：23：45310
所以，我的模擬器
可能會崩潰，雖然。

622
00：23：45310 - > 00：23：47629
它已經有一些問題。

623
00：23：47630 - > 00：23：49340
我沒出去。

624
00：23：49340 - > 00：23：52439
而且我要
殺了該應用程序。

625
00：23：52440 - > 00：23：53210
我回來了。

626
00：23：53210 - > 00：23：57180


627
00：23：57180 - > 00：23：59910
OK，所以評論
仍然存在。

628
00：23：59910 - > 00：24：02410
它不能更新進料，但
註釋等著我

629
00：24：02410 - > 00：24：03390
那裡。

630
00：24：03390 - > 00：24：05165
我只是運行服務器。

631
00：24：05165 - > 00：24：06889
屏幕並
最終同步。

632
00：24：06890 - > 00：24：09680
這樣的想法是
應用程序不關心

633
00：24：09680 - > 00：24：10,860
什麼時候註釋去。

634
00：24：10,860 - > 00：24：13649
它停留在磁盤
等待被上載。

635
00：24：13650 - > 00：24：16440
有一些其他的工作那是
同時上傳的照顧。

636
00：24：16440 - > 00：24：18,690
但最終會
到服務器，

637
00：24：18,690 - > 00：24：21170
除非我當然有一個bug。

638
00：24：21170 - > 00：24：25508
那麼，我們如何走
關心這些事情？

639
00：24：25508 - > 00：24：29030


640
00：24：29030 - > 00：24：34329
它的工作方式是我們
有這種飼料的活動。

641
00：24：34329 - > 00：24：36245
順便說一下，同樣，這
是一個演示應用程序。

642
00：24：36245 - > 00：24：37828
我試圖把重點
在某些事情。

643
00：24：37828 - > 00：24：41010
有可能是toerh問題
這個演示應用程序。

644
00：24：41010 - > 00：24：44,160
最重要的帶走是
事情我們在這裡重點關注。

645
00：24：44,160 - > 00：24：47650
所以本申請中，
當你打電話發帖子，

646
00：24：47650 - > 00：24：51280
它只是告訴飼料
控制器發送帖子。

647
00：24：51280 - > 00：24：54040
其中，作為該作業
在disk--有

648
00：24：54040 - > 00：24：56770
執著的東西
最終將運行

649
00：24：56770 - > 00：24：58810
它負責
更新磁盤，

650
00：24：58810 - > 00：25：01820
以及發送職。

651
00：25：01820 - > 00：25：03590
於是更新磁盤。

652
00：25：03590 - > 00：25：05480
然後將此
[？球場？]的事件。

653
00：25：05480 - > 00：25：08020
當這個事件
這個頁面，我的活動

654
00：25：08020 - > 00：25：10930
知道這種情況下，
刷新本身。

655
00：25：10930 - > 00：25：13710
當它運行時，它
做同樣的事情。

656
00：25：13710 - > 00：25：15839
或者，當它的取消，
它做同樣的事情。

657
00：25：15839 - > 00：25：16879
這是一個持續的工作。

658
00：25：16,880 - > 00：25：19800
這意味著它是怎麼回事
被保存在盤

659
00：25：19800 - > 00：25：23,580
直到成功或
到達重試限制。

660
00：25：23,580 - > 00：25：24580
他們說，OK，沒事的。

661
00：25：24580 - > 00：25：26780
註釋是posted--不錯。

662
00：25：26780 - > 00：25：29230
所以另外一個問題
關於synchronization--

663
00：25：29230 - > 00：25：33,050
如果我下線是會發生什麼？

664
00：25：33,050 - > 00：25：33774
評論請發郵件。

665
00：25：33775 - > 00：25：36,890


666
00：25：36,890 - > 00：25：39790
因此，它不工作，最終。

667
00：25：39790 - > 00：25：43139
我去這個網站。

668
00：25：43140 - > 00：25：44,800
而我在這裡創建註釋。

669
00：25：44,800 - > 00：25：45919
我從網上來的。

670
00：25：45920 - > 00：25：53,450


671
00：25：53,450 - > 00：25：57210
所以，現在這兩種狀態
不一致。

672
00：25：57210 - > 00：25：59960
我的客戶不知道
關於新的。

673
00：25：59960 - > 00：26：02,400
我有一個本地的評論。

674
00：26：02,400 - > 00：26：04270
所以，如果我讓我的
順便說一句network--，

675
00：26：04270 - > 00：26：06220
通常，當
網絡回來，

676
00：26：06220 - > 00：26：07830
你會刷新你的飼料。

677
00：26：07830 - > 00：26：10,679
但我不這樣做的
演示的目的。

678
00：26：10,680 - > 00：26：12250
因此，當在網絡
回來了，這是

679
00：26：12250 - > 00：26：15190
要發送的
即時發布。

680
00：26：15190 - > 00：26：16740
所以這是不同步的。

681
00：26：16740 - > 00：26：18573
但是，當我最終
刷新，這是

682
00：26：18573 - > 00：26：20760
要添加任何人
以正確的順序。

683
00：26：20760 - > 00：26：23600
這是因為一切都
時間由服務器蓋章。

684
00：26：23600 - > 00：26：27909
所以直到一個貼子
發送到服務器，

685
00：26：27,910 - > 00：26：30,400
你做一個最好的猜測
它時間戳。

686
00：26：30,400 - > 00：26：33,870
因此，對於這個例子，在
這樣，我再做一次is--，

687
00：26：33,870 - > 00：26：36199
它可能會改變每
你的申請。

688
00：26：36200 - > 00：26：39925
但這個方法
人做is--等待，

689
00：26：39925 - > 00：26：41050
讓我打開[？安全嗎？]。

690
00：26：41050 - > 00：26：43720


691
00：26：43720 - > 00：26：46440
OK，所以當它
創建，它實際上

692
00：26：46440 - > 00：26：51630
創建模型以獲得
最好的時間戳我有。

693
00：26：51630 - > 00：26：55,140
這是同步的方式
如果我的客戶的時間，真的，

694
00：26：55,140 - > 00：26：56190
真正關閉。

695
00：26：56190 - > 00：26：59810
而如果新的評論不上
頂部，這可能看起來非常糟糕。

696
00：26：59810 - > 00：27：03,000
因為它改變了你的服務器
訂貨，您的UI排序。

697
00：27：03,000 - > 00：27：04850
但是，這可能導致問題。

698
00：27：04850 - > 00：27：10,580
所以，我在這裡做什麼是我分配
一個最好的情況下的時間戳記本地。

699
00：27：10,580 - > 00：27：12313
然後我們去做
在以後的服務器。

700
00：27：12314 - > 00：27：16,140


701
00：27：16,140 - > 00：27：18490
因此，我們再次獲取網絡。

702
00：27：18490 - > 00：27：21840
再次，像另一種情況下，
因為執著，

703
00：27：21840 - > 00：27：25850
所以我在這裡發帖子，
點擊用戶名，

704
00：27：25850 - > 00：27：27730
其移動用戶的職位。

705
00：27：27730 - > 00：27：28500
而且它的完成。

706
00：27：28500 - > 00：27：31154
我從來不取該用戶的飼料。

707
00：27：31154 - > 00：27：32070
但是，後是存在的。

708
00：27：32070 - > 00：27：33485
它無處不在
在我的應用程序。

709
00：27：33486 - > 00：27：34510
因為這是我的磁盤上。

710
00：27：34510 - > 00：27：36710
我不在乎，如果它
不同步與否。

711
00：27：36710 - > 00：27：38,340
我有一個適當的模型
該對象。

712
00：27：38,340 - > 00：27：40240
這是一個簡單的值對象。

713
00：27：40240 - > 00：27：42660
但它一直在努力。

714
00：27：42660 - > 00：27：45,360
讓我們說，我
在用戶進料，

715
00：27：45,360 - > 00：27：46679
但隨後恢復網絡。

716
00：27：46680 - > 00：27：49310


717
00：27：49310 - > 00：27：50340
它最終將發送。

718
00：27：50340 - > 00：27：51939
而飼料也將更新。

719
00：27：51940 - > 00：27：55070
如果我回去，它已經
在這裡即時更新。

720
00：27：55070 - > 00：27：58570
這是因為，如果一個用戶界面是
感興趣的一個特定的事件，

721
00：27：58570 - > 00：27：59899
它偵聽它。

722
00：27：59,900 - > 00：28：03872
現在，我使用的是
全球性事件總線在這裡。

723
00：28：03872 - > 00：28：05580
你也許可以
實施同樣的事情

724
00：28：05580 - > 00：28：07906
與RX或Broadcase。

725
00：28：07906 - > 00：28：10030
這是一個示例應用程序
，做這種方式，

726
00：28：10030 - > 00：28：11300
和它的作品。

727
00：28：11300 - > 00：28：12800
有可能是
多種方法可以做到

728
00：28：12800 - > 00：28：16330
同樣的事情，正確的
的事情，或者更好的辦法。

729
00：28：16330 - > 00：28：17600
因此，我們會得到更多的幻想。

730
00：28：17600 - > 00：28：21379
OK，如果有什麼的
服務器崩潰？

731
00：28：21380 - > 00：28：23,150
因此，這是我真正的
服務器的方式。

732
00：28：23,150 - > 00：28：24125
這是一個很大的樂趣。

733
00：28：24,125 - > 00：28：26,840
這是一個神奇的語言。

734
00：28：26,840 - > 00：28：30,240
所以我要去
在這裡開啟的標誌。

735
00：28：30,240 - > 00：28：34320
這將完成在服務器
是要拯救後，

736
00：28：34320 - > 00：28：36730
但它會
事後崩潰。

737
00：28：36730 - > 00：28：39800
因此，我將無法
意識到我

738
00：28：39800 - > 00：28：42970
可以同步該職位。

739
00：28：42970 - > 00：28：45060
因此，服務器現在崩潰。

740
00：28：45060 - > 00：28：47,250
我走回到這裡。

741
00：28：47,250 - > 00：28：49750
我可以說，OK，[聽不清]。

742
00：28：49750 - > 00：28：52470
因此，工作嘗試20次。

743
00：28：52470 - > 00：28：56420
它退後250
毫秒指數。

744
00：28：56420 - > 00：28：59280
因此，如果將繼續努力，
努力，努力，再告訴我吧。

745
00：28：59280 - > 00：29：03520


746
00：29：03520 - > 00：29：08230
所以，現在的服務器崩潰，
正如你所看到的崩潰日誌。

747
00：29：08230 - > 00：29：10,110
它保存後到磁盤。

748
00：29：10,110 - > 00：29：11,310
但是，客戶端不知道。

749
00：29：11,310 - > 00：29：13179
因此，客戶不斷重試。

750
00：29：13180 - > 00：29：16,410
但是，什麼情況是
您獲取供稿

751
00：29：16,410 - > 00：29：18,220
後端點是工作的罰款。

752
00：29：18,220 - > 00：29：20,130
所以，你刷新。

753
00：29：20,130 - > 00：29：21,590
所以後回來。

754
00：29：21,590 - > 00：29：22929
我知道這是同一職位。

755
00：29：22930 - > 00：29：24,430
所以，我怎麼知道
它是相同的職位？

756
00：29：24,430 - > 00：29：26,900
這都成
點點API設計。

757
00：29：26,900 - > 00：29：29240
但是，我們希望做一個完整的演示。

758
00：29：29240 - > 00：29：31860
所以，我沒有搞清楚它的
同一職位和更新它。

759
00：29：31860 - > 00：29：36340
雖然我的帖子發
從來沒有成功過。

760
00：29：36340 - > 00：29：38419
因此，它的工作方式
在本申請中

761
00：29：38420 - > 00：29：44650
是，通過設計，每個元件
被分配一個客戶端ID。

762
00：29：44650 - > 00：29：47614
所以，如果你看一下這些例子
這裡 - 他們是可見的？

763
00：29：47614 - > 00：29：50980
是啊，沒事，所以
有一個用戶ID。

764
00：29：50980 - > 00：29：52350
而且還有一個客戶端ID。

765
00：29：52350 - > 00：29：55219
此客戶端ID是
隨機生成

766
00：29：55220 - > 00：29：58530
每個職位的唯一每個用戶。

767
00：29：58530 - > 00：30：00720
因此，有一個唯一的
關鍵在我的[聽不清]。

768
00：30：00720 - > 00：30：02270
它說用戶ID和客戶端ID。

769
00：30：02270 - > 00：30：03690
這是一個獨特的元組。

770
00：30：03690 - > 00：30：07150
你依賴的事實，
它不會衝突。

771
00：30：07150 - > 00：30：09220
我的意思是，在技術上就可以了。

772
00：30：09220 - > 00：30：10,900
大概不會。

773
00：30：10,900 - > 00：30：15,150
因此，通過這樣做，當我收到
後從服務器，

774
00：30：15,150 - > 00：30：17,320
我知道後已經
存在於我的磁盤。

775
00：30：17,320 - > 00：30：20347
我更新的那一個，他說
即，OK，我同步此之一。

776
00：30：20347 - > 00：30：21930
我不知道是什麼
發生在工作。

777
00：30：21930 - > 00：30：22,800
我不在乎。

778
00：30：22,800 - > 00：30：25,220
然後該作業
運行時知道。

779
00：30：25,220 - > 00：30：28780
之前嘗試發送
後，它會檢查，嘿嘿，

780
00：30：28780 - > 00：30：30300
這是已經同步？

781
00：30：30300 - > 00：30：35330
所以在這裡，如果你能看到
這裡的代碼，它只是加載它。

782
00：30：35330 - > 00：30：37080
而如果它已經
同步，

783
00：30：37080 - > 00：30：38,139
它不會做任何事情。

784
00：30：38140 - > 00：30：39880
哦，嘿嘿，這已被更新。

785
00：30：39880 - > 00：30：40,380
好消息。

786
00：30：40,380 - > 00：30：41760
一切工作正常。

787
00：30：41760 - > 00：30：44700


788
00：30：44700 - > 00：30：50450
因此，人們更件事 -
好了，最後的想法

789
00：30：50450 - > 00：30：56680
這裡要說的是這個作品，因為
我們看問題的兩個

790
00：30：56680 - > 00：30：57610
不同的問題。

791
00：30：57610 - > 00：30：59290
其中之一是
只有responsible--

792
00：30：59290 - > 00：31：02970
取用戶的交互，
本地處理模型。

793
00：31：02970 - > 00：31：05920
而另一個負責
與服務器進行同步

794
00：31：05920 - > 00：31：06942
然而，它的作用。

795
00：31：06942 - > 00：31：07650
這不是小事。

796
00：31：07650 - > 00：31：10700
你寫了一堆
額外的代碼來說，

797
00：31：10700 - > 00：31：13,420
本地客戶端的ID有
處理衝突。

798
00：31：13,420 - > 00：31：15170
但是，它的工作原理。

799
00：31：15170 - > 00：31：17,310
所以，讓我們來看看
多了一個演示在這裡。

800
00：31：17,310 - > 00：31：21,210
這一次，我會
關閉服務器。

801
00：31：21,210 - > 00：31：23770
所以我sending--我
這再次激發孩子。

802
00：31：23770 - > 00：31：25,740
我把所有發送
這些消息。

803
00：31：25,740 - > 00：31：28,000
當然，他們是
不會去。

804
00：31：28,000 - > 00：31：31,720
如果我在這裡看看，
他們不會。

805
00：31：31,720 - > 00：31：36800
當我恢復服務器，現在
第一個作業釜底抽薪。

806
00：31：36800 - > 00：31：37909
它最終將結束。

807
00：31：37910 - > 00：31：39,450
同時，我可以送多。

808
00：31：39,450 - > 00：31：42,100


809
00：31：42,100 - > 00：31：44550
正如你所看到的，他們將
出一個接一個，一個接一個，

810
00：31：44550 - > 00：31：47909
在正確order--
我的滾動位置丟失。

811
00：31：47910 - > 00：31：50,170
這工作，因為
這些工作

812
00：31：50,170 - > 00：31：52460
通過運行
每停頓同一隊列。

813
00：31：52460 - > 00：31：56230
所以我知道誰進來
第一個會被優先處理。

814
00：31：56230 - > 00：31：58920
因此，我們保證，
他們是為了。

815
00：31：58920 - > 00：32：00670
我們無法保證
它們是時間標記。

816
00：32：00670 - > 00：32：03150
因為這是
技術上不可能

817
00：32：03150 - > 00：32：06,400
除非你想依靠
你的客戶端時間戳是什麼。

818
00：32：06,400 - > 00：32：09870
但是，我們給予他們的訂單。

819
00：32：09870 - > 00：32：11,639
再次，這是所有
獨立的UI。

820
00：32：11640 - > 00：32：12770
它不關心的。

821
00：32：12770 - > 00：32：16,120
它知道的唯一的事情就是如何
我從磁盤加載此，

822
00：32：16,120 - > 00：32：19770
和我怎麼把這些意見
我的應用程序邏輯？

823
00：32：19770 - > 00：32：21830
一個例子我
想實際go--我

824
00：32：21830 - > 00：32：23210
想通過這個代碼。

825
00：32：23210 - > 00：32：25626
這樣的具有的問題之一
這種事件驅動架構

826
00：32：25626 - > 00：32：28205
因為是所有這些
事件正在發生，

827
00：32：28205 - > 00：32：29080
我該如何同步？

828
00：32：29080 - > 00：32：31460
如果我錯過一個事件？

829
00：32：31460 - > 00：32：34500
或者，如果時間軸的
時間戳不匹配？

830
00：32：34500 - > 00：32：36690
再次，對於本
演示應用程序，

831
00：32：36690 - > 00：32：40610
這一工作的方式是每一個
單一的事件是非常重要的

832
00：32：40610 - > 00：32：41810
帶有時間戳。

833
00：32：41810 - > 00：32：44389
因此，例如，對於
取飼料事件，

834
00：32：44390 - > 00：32：47500
時間戳時間戳
最古老的職位。

835
00：32：47500 - > 00：32：50490
因此，如果有人會
加載這些一次，

836
00：32：50490 - > 00：32：53210
它確保它包括
該時間戳在查詢中。

837
00：32：53210 - > 00：32：55430
因此，它加載的東西
事後，那個。

838
00：32：55430 - > 00：32：59730
所以每次進
活動收到活動現場拍下

839
00：32：59730 - > 00：33：05600
讓我們說[聽不清] - 它
檢查這是我的用戶。

840
00：33：05600 - > 00：33：07840
如果這是為
我的用戶，它只是

841
00：33：07840 - > 00：33：09669
調用刷新
從最早的。

842
00：33：09670 - > 00：33：12910
然後是刷新方法，
而在查詢模型，

843
00：33：12910 - > 00：33：14150
它使用時間戳。

844
00：33：14150 - > 00：33：17240
或者，如果沒有
時間戳，它採用頂級之一。

845
00：33：17240 - > 00：33：19310
因為你不希望
不斷刷新的事情。

846
00：33：19310 - > 00：33：22169


847
00：33：22170 - > 00：33：25285
是啊，這就是mostly--讓
我看看，如果我錯過了什麼。

848
00：33：25285 - > 00：33：30070


849
00：33：30070 - > 00：33：33879
好吧，我想我們會
發布此代碼，無論是

850
00：33：33880 - > 00：33：36,890
在服務器端和
在客戶端，

851
00：33：36,890 - > 00：33：39640
到Github上盡快as--我
這裡需要一些澄清

852
00：33：39640 - > 00：33：40500
和那裡。

853
00：33：40500 - > 00：33：43195
但是你可以用它玩。

854
00：33：43195 - > 00：33：44570
我們很樂意
得到[聽不清]

855
00：33：44570 - > 00：33：48356
或什麼，如果你想
什麼可以做的更好。

856
00：33：48356 - > 00：33：51812
而且這是很好的分享和
剛剛從那裡繼續前進。

857
00：33：51812 - > 00：33：55169
好吧，當然，僅此而已。

858
00：33：55170 - > 00：33：57452
現在是時候對一些問題。

859
00：33：57452 - > 00：34：00383
[掌聲]

860
00：34：00383 - > 00：34：06955


861
00：34：06955 - > 00：34：09330
ADAM POWELL：我認為，
我們已經有了一個麥克風浮動

862
00：34：09330 - > 00：34：10,610
也許周圍。

863
00：34：10,610 - > 00：34：13,110
在那裡，我們走了。

864
00：34：13,110 - > 00：34：16570
聽眾：它將包含測試？

865
00：34：16570 - > 00：34：17,400
YIGIT博伊爾：咦？

866
00：34：17,400 - > 00：34：19670
聽眾：請問
項目包含測試？

867
00：34：19670 - > 00：34：23420
YIGIT博伊爾：是的，
它實際上做。

868
00：34：23420 - > 00：34：25199
所以實際上，我應該
已經顯示了它。

869
00：34：25199 - > 00：34：30,750
所以，如果你看看at--好，
他們可能不會很大考驗。

870
00：34：30,750 - > 00：34：32159
我不是一個測試專家。

871
00：34：32159 - > 00：34：34092
但他們做的測試。

872
00：34：34092 - > 00：34：35550
他們大多是
審訊測試。

873
00：34：35550 - > 00：34：38380
如果你看的東西更多
花哨的，例如，取

874
00：34：38380 - > 00：34：41723
飼料，所以我說我們do--

875
00：34：41723 - > 00：34：43639
ADAM POWELL：我們能否
切換幻燈片在後面

876
00：34：43639 - > 00：34：44837
到電腦真正的快？

877
00：34：44837 - > 00：34：47498
YIGIT博伊爾：噢，對不起。

878
00：34：47498 - > 00：34：48789
我們可以回到電腦？

879
00：34：48789 - > 00：34：51489


880
00：34：51489 - > 00：34：53199
好的謝謝。

881
00：34：53199 - > 00：34：56,634
因此，應用程序使用匕首。

882
00：34：56,634 - > 00：35：00822
這是我的標記
一些API調用。

883
00：35：00822 - > 00：35：04580
但是，讓我們see--取
飼料，沒有，發評論。

884
00：35：04580 - > 00：35：05422
那樣就太好了。

885
00：35：05422 - > 00：35：09070


886
00：35：09070 - > 00：35：11035
ADAM POWELL：所以
簡短的回答，是的。

887
00：35：11035 - > 00：35：12,160
YIGIT博伊爾：他們都在這裡。

888
00：35：12,160 - > 00：35：13283
我有一些非常好的測試。

889
00：35：13284 - > 00：35：15630
我不能確定find--，我發現它。

890
00：35：15630 - > 00：35：16230
400。

891
00：35：16230 - > 00：35：21420
因此，這是創建
工作，嘲諷的API服務

892
00：35：21420 - > 00：35：26730
因此，如果有人試圖
發送後，返回404。

893
00：35：26,730 - > 00：35：29490
那注入測試
組件，運行作業，

894
00：35：29490 - > 00：35：31180
檢查相應的
事件時發送。

895
00：35：31180 - > 00：35：38299
做的事情之一是，當
一些輸出發生，因為事件，

896
00：35：38,300 - > 00：35：40,720
這不是很容易對它們進行測試。

897
00：35：40,720 - > 00：35：43730
在這個例子中，我使用，
在測試應用程序，

898
00：35：43730 - > 00：35：46130
我使用的是日誌
事件總線，基本上

899
00：35：46130 - > 00：35：49950
記錄每一個事件，以便
我可以在以後對這些斷言。

900
00：35：49950 - > 00：35：52390
再次，可能有不同的
或者更好的方法來做到這一點。

901
00：35：52390 - > 00：35：53765
但是，這是
一些作品。

902
00：35：53765 - > 00：35：54,650
而我們的測試。

903
00：35：54,650 - > 00：36：06,400


904
00：36：06,400 - > 00：36：09360
聽眾：什麼是您的意見
使用自定義視圖，而不是

905
00：36：09360 - > 00：36：12530
片段讓你不
要處理的片段

906
00：36：12530 - > 00：36：13920
怪癖，如果你願意？

907
00：36：13920 - > 00：36：17510
所以像孩子片段
經理或中後衛彈出

908
00：36：17510 - > 00：36：20092
後棧
有一個保存的狀態。

909
00：36：20092 - > 00：36：21800
ADAM POWELL：如此反复，
我認為，這些

910
00：36：21800 - > 00：36：23540
是一種無關係。

911
00：36：23540 - > 00：36：27029
僅僅因為一個片段
控制意見。

912
00：36：27,030 - > 00：36：28440
這不是一個視圖本身。

913
00：36：28440 - > 00：36：29940
這是一種
我們試圖

914
00：36：29940 - > 00：36：32240
獲得在早一點。

915
00：36：32240 - > 00：36：34160
總的來說，我認為
那很多人

916
00：36：34160 - > 00：36：37290
當寫片段他們真的
為了編寫自定義視圖。

917
00：36：37290 - > 00：36：40630
所以我認為，在許多
的情況下，看看到底是什麼

918
00：36：40630 - > 00：36：44530
是你特別
封裝UI大塊

919
00：36：44530 - > 00：36：46747
需要表達和回應。

920
00：36：46747 - > 00：36：48330
如果那些事件
可來

921
00：36：48330 - > 00：36：50240
一些備用
組件是

922
00：36：50240 - > 00：36：54930
那種創作的那件的
整個UI內的地方，

923
00：36：54930 - > 00：36：57940
那麼這充分說明它是
可能多一點點

924
00：36：57940 - > 00：36：59172
就像一個視圖組。

925
00：36：59172 - > 00：37：00630
如果它的東西
真正需要

926
00：37：00630 - > 00：37：04140
對其他作出反應
應用程序的元素

927
00：37：04140 - > 00：37：06420
生命週期和
活動的生命週期，

928
00：37：06420 - > 00：37：09120
如果它做的事情
類似事件註冊，

929
00：37：09120 - > 00：37：11299
處理事情
這樣的話，

930
00：37：11300 - > 00：37：13500
可能更適合於
在這種情況下的片段。

931
00：37：13500 - > 00：37：15,240
但總體而言，我認為，
人們往往

932
00：37：15,240 - > 00：37：17859
瘦一點點
過於依賴片段

933
00：37：17,860 - > 00：37：19950
當他們想到一個
特別是亞段

934
00：37：19950 - > 00：37：20529
他們的UI。

935
00：37：20,530 - > 00：37：26485


936
00：37：26485 - > 00：37：27730
聽眾：你好。

937
00：37：27730 - > 00：37：30340
有一個問題我有
是，你怎麼了

938
00：37：30340 - > 00：37：34020
處理序列
這些作業到磁盤

939
00：37：34020 - > 00：37：35970
和回退時，應用程序死？

940
00：37：35970 - > 00：37：39,160
你滾你自己的邏輯，
或者你使用的東西

941
00：37：39,160 - > 00：37：41960
像一個框架的東西？

942
00：37：41960 - > 00：37：43710
YIGIT博伊爾：對於這個
演示應用程序，

943
00：37：43710 - > 00：37：46730
我使用的作業隊列，這是
一些庫我以前寫的。

944
00：37：46730 - > 00：37：48790
你可以簡單的序列化。

945
00：37：48790 - > 00：37：50360
您可以使用磁帶。

946
00：37：50360 - > 00：37：52540
有最近
另一個談話使用

947
00：37：52540 - > 00：37：56570
磁帶到您的序列
東西，使它更像工作。

948
00：37：56570 - > 00：37：59040
有多種解決方案
這個在那裡。

949
00：37：59040 - > 00：38：01180
這並不是說複雜無論是。

950
00：38：01180 - > 00：38：03642
您可以選擇其中之一
它適合您的需求。

951
00：38：03642 - > 00：38：04600
聽眾：酷，謝謝。

翻譯
關閉即時翻譯
952
00：38：04600 - > 00：38：08450


953
00：38：08450 - > 00：38：09950
ADAM POWELL：我們已經
有一人突前。

954
00：38：09950 - > 00：38：13337


955
00：38：13337 - > 00：38：14920
聽眾：在該
類型的應用程序，

956
00：38：14920 - > 00：38：17620
你可以使用一個同步適配器，
或者你會使用像異步REST

957
00：38：17620 - > 00：38：20446
來電聯繫服務器？

958
00：38：20446 - > 00：38：21819
YIGIT博伊爾：所以
對於這樣demo--

959
00：38：21820 - > 00：38：24420
我們給了一件事
在滑動實施例

960
00：38：24420 - > 00：38：28950
是分開的地方
從服務器的任務的任務。

961
00：38：28950 - > 00：38：32410
我們這樣做的方式是
對於UI相關的東西，

962
00：38：32410 - > 00：38：34040
我使用的同步任務。

963
00：38：34040 - > 00：38：36500
我從來沒有使用它
網絡，只為UI的東西。

964
00：38：36500 - > 00：38：39100
而對於網絡，我
使用作業隊列。

965
00：38：39100 - > 00：38：42919
因此，就業是唯一
被調用網絡。

966
00：38：42919 - > 00：38：45210
ADAM POWELL：是的，同步
適配器一般是有益的

967
00：38：45210 - > 00：38：48,310
一旦你有一個更
複雜的賬戶

968
00：38：48,310 - > 00：38：50790
基礎設施，你有
其他一些機械

969
00：38：50790 - > 00：38：53279
那這是真的
一種圍繞。

970
00：38：53280 - > 00：38：55730
所以，如果它看起來像
你經歷了很多

971
00：38：55730 - > 00：38：59255
額外的機械
與同步適配器工作，

972
00：38：59255 - > 00：39：01380
那麼也許開始服用
看一些更多的東西，

973
00：39：01380 - > 00：39：03120
就像一個作業調度程序，
等等等等，

974
00：39：03120 - > 00：39：05,000
看看這是
東西是較簡單的

975
00：39：05,000 - > 00：39：06291
仍然能夠滿足您的需求。

976
00：39：06291 - > 00：39：10717


977
00：39：10717 - > 00：39：13,050
聽眾：當您啟動
構建所有這些應用

978
00：39：13,050 - > 00：39：15970
與這些不同
數據型號 - 版本

979
00：39：15970 - > 00：39：2萬9
所以你可能有，像，取
斷網數據，更新

980
00：39：20010 - > 00：39：23180
用戶已對作出
這實際上並沒有數據

981
00：39：23180 - > 00：39：26580
推到數據庫中，做
你們有什麼類，

982
00：39：26580 - > 00：39：29040
可以幫助我們保持
所有這些應用程序

983
00：39：29040 - > 00：39：33360
邏輯或任何庫，
你會建議我們使用

984
00：39：33360 - > 00：39：37710
維護所有這些版本？

985
00：39：37710 - > 00：39：40079
ADAM POWELL：你
有什麼建議？

986
00：39：40079 - > 00：39：42,120
YIGIT博伊爾：我很抱歉，
一無所知的版本。

987
00：39：42,120 - > 00：39：45560
但實際上提醒
我的東西，我忘了。

988
00：39：45560 - > 00：39：47310
其中一個重要的
事情在你的客戶

989
00：39：47310 - > 00：39：50040
是客戶的一致性。

990
00：39：50040 - > 00：39：51920
和服務器可能會崩潰。

991
00：39：51920 - > 00：39：55029
但是你的服務器也可以
開始返回壞數據。

992
00：39：55029 - > 00：39：56570
做的事情之一
此客戶端不

993
00：39：56570 - > 00：39：59390
是的，如果我打開一個用戶模式，
讓我們say--一切保存。

994
00：39：59390 - > 00：40：03779


995
00：40：03780 - > 00：40：06660
所以，我們之前保存
任何事情，我們會迄今為止，它。

996
00：40：06660 - > 00：40：09670
而且，如果它是不適用於此
客戶端，我們只是把它扔出去。

997
00：40：09670 - > 00：40：11570
因為我不明白。

998
00：40：11570 - > 00：40：12480
該服務器有一個bug。

999
00：40：12480 - > 00：40：13896
也許服務器
是一個新的版本。

1000
00：40：13896 - > 00：40：15160
我不知道。

1001
00：40：月薪在15,160 - > 00：40：18020
如果我不明白
對象，我把它扔出去。

1002
00：40：18020 - > 00：40：20830
這使得更容易為
應用程序的其餘部分，

1003
00：40：20830 - > 00：40：24344
像，確定，如果對象是
在那裡，它的正確填寫。

1004
00：40：24344 - > 00：40：26760
ADAM POWELL：所以給點意見
處理特定的數據

1005
00：40：26760 - > 00：40：28797
不一致的地方，
特別是在跨越升級，

1006
00：40：28797 - > 00：40：30880
不同的服務器版本，
等等等等，

1007
00：40：30880 - > 00：40：32838
我們發現有工作
有很多球隊，

1008
00：40：32838 - > 00：40：35285
無論在谷歌和
外部谷歌，

1009
00：40：35285 - > 00：40：39740
是許多倍，實際
業務邏輯件

1010
00：40：39740 - > 00：40：41500
使一個應用程序
有趣的趨向

1011
00：40：41500 - > 00：40：44570
相差的那麼多
我們已經應用

1012
00：40：44570 - > 00：40：47150
有很多的困難找到
一個一刀切的解決方案

1013
00：40：47150 - > 00：40：50200
只提供最便捷的
處方，大家好，

1014
00：40：50200 - > 00：40：53290
去使用這個處理
這個特殊的問題空間。

1015
00：40：53290 - > 00：40：55740
這是東西，你可以
使很多的假設

1016
00：40：55740 - > 00：40：57549
基於該形狀
您的數據和什麼

1017
00：40：57550 - > 00：40：59,710
這是您的數據
實際上代表。

1018
00：40：59,710 - > 00：41：02490
所以，很多時候，你需要
東西少了很多複雜的

1019
00：41：02490 - > 00：41：05471
比一些普通的解決方案，
解決了整個世界。

1020
00：41：05472 - > 00：41：07680
但是，如果你已經有了一些想法，
請跟踪我們中的一些

1021
00：41：07680 - > 00：41：09569
倒在這裡的大廳。

1022
00：41：09570 - > 00：41：11190
我們很樂意
聽說他們。

1023
00：41：11190 - > 00：41：18400


1024
00：41：18400 - > 00：41：19086
還有誰？

1025
00：41：19086 - > 00：41：22350


1026
00：41：22350 - > 00：41：25182
好了，好了，
非常感謝你。

1027
00：41：25182 - > 00：41：26140
YIGIT博伊爾：謝謝。

1028
00：41：26140 - > 00：41：30140
[掌聲]

1029
00：41：30140 - > 00：41：41136
Google 翻譯企業版：譯者工具包網站翻譯工具全球商機搜尋器
關於 Google 翻譯社群行動版
關於 Google隱私權與條款說明提供意見


