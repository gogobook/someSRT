1
00:00:00,000 --> 00:00:01,220


2
00:00:01,220 --> 00:00:02,642
SUBIR JHANB: Hi, everyone.

3
00:00:02,642 --> 00:00:04,225
I hope you're having
a great first day

4
00:00:04,225 --> 00:00:09,370
at I/O. My name in Subir, and
I work on cloud messaging.

5
00:00:09,370 --> 00:00:12,840
When we launched Google
Cloud Messaging in 2012,

6
00:00:12,840 --> 00:00:17,790
our goal was to make it the
best mobile messaging platform.

7
00:00:17,790 --> 00:00:21,759
And we wanted to give you the
tools to reach your users,

8
00:00:21,760 --> 00:00:24,430
notify them of important
events, and help

9
00:00:24,430 --> 00:00:26,840
keep your data in your
applications fresh.

10
00:00:26,840 --> 00:00:31,590
Today, GCM is used in more
than 1 million applications,

11
00:00:31,590 --> 00:00:34,610
reaching more than
2 billion devices,

12
00:00:34,610 --> 00:00:38,629
and we receive around 2
million queries every second.

13
00:00:38,630 --> 00:00:42,600
That's over 170
billion messages a day.

14
00:00:42,600 --> 00:00:45,200
And this growth has
been just amazing.

15
00:00:45,200 --> 00:00:47,500
We're always improving
our infrastructure

16
00:00:47,500 --> 00:00:51,050
so that we can scale more,
as more developers take

17
00:00:51,050 --> 00:00:55,050
our platform for
their messaging needs.

18
00:00:55,050 --> 00:00:57,029
We believe the two
most important aspects

19
00:00:57,030 --> 00:01:01,080
of any messaging platform are
liability and low latency.

20
00:01:01,080 --> 00:01:03,269
GCM is extremely reliable.

21
00:01:03,270 --> 00:01:05,069
We deliver every
message that you

22
00:01:05,069 --> 00:01:07,680
intend to send to your users
honoring the constraints

23
00:01:07,680 --> 00:01:09,330
that you provide.

24
00:01:09,330 --> 00:01:11,030
And GCM is fast.

25
00:01:11,030 --> 00:01:14,140
For an online device,
our mean latency

26
00:01:14,140 --> 00:01:17,320
is around 60
milliseconds, and our 95%

27
00:01:17,320 --> 00:01:20,309
is around 160 milliseconds.

28
00:01:20,310 --> 00:01:24,150
There is another talk on
GCM performance factors,

29
00:01:24,150 --> 00:01:25,940
and it goes into
insights on how we

30
00:01:25,940 --> 00:01:28,800
measure and improve on our
performance and reliability.

31
00:01:28,800 --> 00:01:30,530
I highly recommend
going to that one

32
00:01:30,530 --> 00:01:32,185
if you're interested
in this area.

33
00:01:32,185 --> 00:01:35,370


34
00:01:35,370 --> 00:01:38,600
GCM is an integral part of
a lot of applications today,

35
00:01:38,600 --> 00:01:40,949
and messaging is a feature
that almost every developer

36
00:01:40,950 --> 00:01:45,100
needs and uses for
engaging with their users.

37
00:01:45,100 --> 00:01:47,789
Studies have shown that users
that have push notifications

38
00:01:47,790 --> 00:01:51,160
enabled have almost three
times higher attention

39
00:01:51,160 --> 00:01:53,509
and 88% more app launches.

40
00:01:53,510 --> 00:01:55,679
And that means more
user engagement

41
00:01:55,679 --> 00:01:56,595
for your applications.

42
00:01:56,595 --> 00:02:00,620


43
00:02:00,620 --> 00:02:02,610
Now earlier, in the
keynote, we announced

44
00:02:02,610 --> 00:02:06,190
our new mobile development
platform, Firebase.

45
00:02:06,190 --> 00:02:08,859
Firebase is a suite
of integrated products

46
00:02:08,860 --> 00:02:12,700
which are designed to help
you develop your application,

47
00:02:12,700 --> 00:02:16,630
grow your user base,
and earn more money.

48
00:02:16,630 --> 00:02:19,190
And GCM shares these same goals.

49
00:02:19,190 --> 00:02:22,280
We believe we can offer
a lot more to developers

50
00:02:22,280 --> 00:02:25,200
when integrated with
other Firebase products.

51
00:02:25,200 --> 00:02:27,459
So I'm happy to announce
that, as we are launching

52
00:02:27,460 --> 00:02:30,510
new features to GCM, this
year we are renaming it

53
00:02:30,510 --> 00:02:32,286
to Firebase Cloud Messaging.

54
00:02:32,287 --> 00:02:35,420


55
00:02:35,420 --> 00:02:37,750
So what this means,
the cloud messaging

56
00:02:37,750 --> 00:02:40,490
is one of the products
in the Firebase family,

57
00:02:40,490 --> 00:02:43,060
having seamless integration
with other Firebase products

58
00:02:43,060 --> 00:02:46,330
like Firebase Analytics,
making it easier

59
00:02:46,330 --> 00:02:50,820
for you to develop, grow, and
earn from your applications.

60
00:02:50,820 --> 00:02:52,660
And this uses the same
underlying messaging

61
00:02:52,660 --> 00:02:55,150
infrastructure like
that we have today,

62
00:02:55,150 --> 00:02:56,800
so you can be assured
you'll receive

63
00:02:56,800 --> 00:02:59,130
the same level of
reliability and performance

64
00:02:59,130 --> 00:03:00,152
that you're used to.

65
00:03:00,152 --> 00:03:02,910


66
00:03:02,910 --> 00:03:06,359
So what's new with Firebase
Cloud Messaging, or FCM?

67
00:03:06,360 --> 00:03:09,440
Well, we've really
simplified our SDKs.

68
00:03:09,440 --> 00:03:12,329
It's really simple APIs
to start using FCM.

69
00:03:12,330 --> 00:03:14,770
You can reach multiple
platforms using FCM,

70
00:03:14,770 --> 00:03:16,850
and, based on your
feedback, we've

71
00:03:16,850 --> 00:03:18,460
added a lot of new features.

72
00:03:18,460 --> 00:03:19,460
So let's get started.

73
00:03:19,460 --> 00:03:22,040


74
00:03:22,040 --> 00:03:25,170
Our new SDKs are designed to
make the integration with FCM

75
00:03:25,170 --> 00:03:29,149
much, much simpler, and take
away a lot of code from you.

76
00:03:29,150 --> 00:03:30,810
Let me explain.

77
00:03:30,810 --> 00:03:34,160
Firebase Messaging SDKs
for Android and iOS

78
00:03:34,160 --> 00:03:37,000
take away a lot of boilerplate
code away from you, code

79
00:03:37,000 --> 00:03:38,750
that you had to deal
with yourself before,

80
00:03:38,750 --> 00:03:41,640
like registration logic,
subscribing to topics,

81
00:03:41,640 --> 00:03:43,500
handling any errors you
get with our servers

82
00:03:43,500 --> 00:03:45,280
while doing these actions.

83
00:03:45,280 --> 00:03:48,960
All that is taken
care of automatically.

84
00:03:48,960 --> 00:03:51,131
Just another example,
this is-- these

85
00:03:51,131 --> 00:03:52,630
are all the permissions
that you had

86
00:03:52,630 --> 00:03:55,799
to worry about before with GCM.

87
00:03:55,800 --> 00:03:57,530
Not anymore.

88
00:03:57,530 --> 00:04:00,760
Our new FCM libraries
use manifest merging,

89
00:04:00,760 --> 00:04:02,959
so you don't have to
worry about permissions.

90
00:04:02,960 --> 00:04:05,520
It automatically adds
any permissions needed.

91
00:04:05,520 --> 00:04:10,040
And just one less step
for you to worry about.

92
00:04:10,040 --> 00:04:13,459
We've also simplified
the registration flow.

93
00:04:13,460 --> 00:04:15,510
As you know, a
registration token

94
00:04:15,510 --> 00:04:18,140
is the address that
FCM uses to deliver

95
00:04:18,140 --> 00:04:21,010
the message to a device.

96
00:04:21,010 --> 00:04:23,700
Now this process
is asynchronous.

97
00:04:23,700 --> 00:04:28,280
Our libraries automatically
get a token on your behalf.

98
00:04:28,280 --> 00:04:30,630
So when you call
IID.getToken, we

99
00:04:30,630 --> 00:04:32,490
give you an already
registered token.

100
00:04:32,490 --> 00:04:35,615
All you have to do, send
this to your servers,

101
00:04:35,615 --> 00:04:36,740
and start sending messages.

102
00:04:36,740 --> 00:04:40,370


103
00:04:40,370 --> 00:04:43,010
And all the improvements that
we are going to announce today

104
00:04:43,010 --> 00:04:46,330
apply to both our
Android and iOS SDKs.

105
00:04:46,330 --> 00:04:48,246
Our goal is to make FCM
really cross-platform.

106
00:04:48,246 --> 00:04:52,450


107
00:04:52,450 --> 00:04:56,140
Now, in addition to having
SDKs for iOS and Android,

108
00:04:56,140 --> 00:05:00,080
we are also launching a
brand-new SDK for our C++

109
00:05:00,080 --> 00:05:02,200
users.

110
00:05:02,200 --> 00:05:03,930
Now you can have
one implementation

111
00:05:03,930 --> 00:05:07,090
to reach your users on
both these platforms,

112
00:05:07,090 --> 00:05:11,669
and I'm sure our game developers
are going to love this.

113
00:05:11,670 --> 00:05:13,130
Now, we will get
into more details

114
00:05:13,130 --> 00:05:15,687
on how to use these
new SDKs in just a bit.

115
00:05:15,687 --> 00:05:18,370


116
00:05:18,370 --> 00:05:21,090
As you saw, FCM
is cross-platform.

117
00:05:21,090 --> 00:05:24,109


118
00:05:24,110 --> 00:05:25,850
Last year at I/O,
we added support

119
00:05:25,850 --> 00:05:30,060
for iOS and Chrome apps
in addition to Android,

120
00:05:30,060 --> 00:05:33,110
and we saw a great adoption
on these platforms.

121
00:05:33,110 --> 00:05:34,980
And it was a very
strong signal to us

122
00:05:34,980 --> 00:05:38,410
that developers can really use
one solution to reach users

123
00:05:38,410 --> 00:05:40,140
on different platforms.

124
00:05:40,140 --> 00:05:42,650
So we are making it even
easier this year by adding

125
00:05:42,650 --> 00:05:46,679
the brand-new C++ SDK and
with Web Push support on FCM.

126
00:05:46,680 --> 00:05:50,060


127
00:05:50,060 --> 00:05:55,270
With FCM, you can now implement
the standard IETF Web Push APIs

128
00:05:55,270 --> 00:05:58,830
and start targeting
your browsers.

129
00:05:58,830 --> 00:06:02,620
For example, on Chrome,
you can send a message

130
00:06:02,620 --> 00:06:05,790
to your Chrome page in
Windows, Mac, or Linux,

131
00:06:05,790 --> 00:06:08,818
and you can also target
your Chrome on Android.

132
00:06:08,818 --> 00:06:12,760


133
00:06:12,760 --> 00:06:16,870
Let's talk about some
features we've added.

134
00:06:16,870 --> 00:06:18,890
Last year, we launched
topic messaging.

135
00:06:18,890 --> 00:06:21,510
And by the way, this is one
of my favorite features.

136
00:06:21,510 --> 00:06:24,659
Topic messaging allows you
to send a single message

137
00:06:24,660 --> 00:06:26,630
to a large number of devices.

138
00:06:26,630 --> 00:06:28,780
It's a great way to
notify your users that

139
00:06:28,780 --> 00:06:33,130
are interested in common topics,
like a musician or an artist

140
00:06:33,130 --> 00:06:35,880
or a game or a sport event.

141
00:06:35,880 --> 00:06:40,120
All you have to do is
publish a message to FCM,

142
00:06:40,120 --> 00:06:43,500
and FCM delivers it to
all the devices subscribed

143
00:06:43,500 --> 00:06:44,924
to this topic.

144
00:06:44,924 --> 00:06:47,880


145
00:06:47,880 --> 00:06:49,969
We also had a limit of
one million subscribers

146
00:06:49,970 --> 00:06:52,140
when we launched
this, and a lot of you

147
00:06:52,140 --> 00:06:55,200
asked for more, because
you have more users.

148
00:06:55,200 --> 00:06:57,979
So we are removing any
limits on topic messaging.

149
00:06:57,980 --> 00:06:59,710
Now you can have
as many subscribers

150
00:06:59,710 --> 00:07:01,864
on a single topic, or
across different topics,

151
00:07:01,865 --> 00:07:02,698
in your application.

152
00:07:02,698 --> 00:07:06,320


153
00:07:06,320 --> 00:07:07,599
Quick reminder.

154
00:07:07,600 --> 00:07:10,350
This is how you send
a message to a topic.

155
00:07:10,350 --> 00:07:12,870
All you have to do
is set the topic name

156
00:07:12,870 --> 00:07:15,207
in the &quot;to&quot; parameter.

157
00:07:15,207 --> 00:07:16,790
But what if you want
to send a message

158
00:07:16,790 --> 00:07:19,280
to a combination of topics?

159
00:07:19,280 --> 00:07:23,969
For example, let's say you
have a weather application,

160
00:07:23,970 --> 00:07:27,810
and you want to send weather
updates to your users.

161
00:07:27,810 --> 00:07:30,120
Now, some of your
users can be subscribed

162
00:07:30,120 --> 00:07:32,820
to topic for San
Francisco weather,

163
00:07:32,820 --> 00:07:34,974
and some can be subscribed
to topic for Oakland.

164
00:07:34,975 --> 00:07:37,916


165
00:07:37,916 --> 00:07:39,947
So when there is a weather
update in this area,

166
00:07:39,947 --> 00:07:42,030
you don't want to publish
the same message on both

167
00:07:42,030 --> 00:07:44,583
these topics, as there
might be an overlap,

168
00:07:44,584 --> 00:07:46,375
and some users will
get duplicate messages.

169
00:07:46,375 --> 00:07:49,250


170
00:07:49,250 --> 00:07:53,500
Now you can use our brand-new
API to specify a condition,

171
00:07:53,500 --> 00:07:56,860
and FCM will make sure we only
deliver this message to users

172
00:07:56,860 --> 00:07:59,020
that qualify this condition.

173
00:07:59,020 --> 00:08:02,289
So in this example, the message
will be published to users

174
00:08:02,290 --> 00:08:04,550
that either have the San
Francisco weather topic

175
00:08:04,550 --> 00:08:06,140
or the Oakland weather topic.

176
00:08:06,140 --> 00:08:08,729
So it's a union of users.

177
00:08:08,730 --> 00:08:11,410
You can also hit an
intersection of users

178
00:08:11,410 --> 00:08:12,850
by using the &quot;and&quot; operator.

179
00:08:12,850 --> 00:08:17,377


180
00:08:17,377 --> 00:08:19,210
Now, we know you have
all these registration

181
00:08:19,210 --> 00:08:21,580
tokens on your servers.

182
00:08:21,580 --> 00:08:23,080
Wouldn't it be great
if you can just

183
00:08:23,080 --> 00:08:26,479
categorize them into topics
based on your users' interests?

184
00:08:26,480 --> 00:08:30,520
I mean, after all, you
know your users' interests.

185
00:08:30,520 --> 00:08:32,370
Yes, you can.

186
00:08:32,370 --> 00:08:36,039
Here is the API with which you
can subscribe a registration

187
00:08:36,039 --> 00:08:38,409
token to a particular topic.

188
00:08:38,409 --> 00:08:42,020
For example, the topic
name here is movies.

189
00:08:42,020 --> 00:08:44,210
All you have to do is give
us the registration token

190
00:08:44,210 --> 00:08:49,160
and the topic name in a URL,
and FCM will subscribe this

191
00:08:49,160 --> 00:08:51,329
to this topic.

192
00:08:51,330 --> 00:08:54,680
You can also send us a bunch
of registration tokens,

193
00:08:54,680 --> 00:08:56,719
and FCM will subscribe
them when you send them

194
00:08:56,720 --> 00:09:00,019
to this batchAdd URL.

195
00:09:00,019 --> 00:09:02,310
You don't even have to update
your application anymore.

196
00:09:02,310 --> 00:09:06,300
You can just start using topic
messaging from server side.

197
00:09:06,300 --> 00:09:08,510
Similar to the batchAdd,
with batchRemove

198
00:09:08,510 --> 00:09:11,120
you can unsubscribe these
tokens from this topic.

199
00:09:11,120 --> 00:09:14,290


200
00:09:14,290 --> 00:09:16,849
Now just a word of
caution before we proceed.

201
00:09:16,850 --> 00:09:19,630
When you send messages
using topic messaging,

202
00:09:19,630 --> 00:09:23,550
we allow you to publish to
a large number of users.

203
00:09:23,550 --> 00:09:26,260
So when you publish
too fast on big topics,

204
00:09:26,260 --> 00:09:28,130
you should make
sure that, if you

205
00:09:28,130 --> 00:09:32,939
see any errors from our
servers, you should retry later.

206
00:09:32,940 --> 00:09:34,460
And if these
devices, in turn, are

207
00:09:34,460 --> 00:09:36,980
going to hit your
servers for more data,

208
00:09:36,980 --> 00:09:39,030
you should make sure your
servers are provisioned

209
00:09:39,030 --> 00:09:39,990
to handle that traffic.

210
00:09:39,990 --> 00:09:43,260


211
00:09:43,260 --> 00:09:46,390
Do we have any iOS
developers in the room?

212
00:09:46,390 --> 00:09:48,250
We have quite a few.

213
00:09:48,250 --> 00:09:50,430
Last year, when we
added support for iOS,

214
00:09:50,430 --> 00:09:52,930
a lot of iOS developers
asked us if they can just

215
00:09:52,930 --> 00:09:56,810
use their existing APNs tokens
and start using our service.

216
00:09:56,810 --> 00:09:59,010
And the answer today is yes.

217
00:09:59,010 --> 00:10:03,189
Now we have an API with which
you can send us your APNs

218
00:10:03,190 --> 00:10:06,360
tokens, and FCM will give
you back registration

219
00:10:06,360 --> 00:10:10,080
tokens for those APNs devices.

220
00:10:10,080 --> 00:10:12,000
Here's how you do it.

221
00:10:12,000 --> 00:10:14,870
You can send us an array
list of your APNs tokens

222
00:10:14,870 --> 00:10:21,420
to the batchImport URL, and
FCM will return you back

223
00:10:21,420 --> 00:10:24,209
a registration token,
along with a status

224
00:10:24,210 --> 00:10:27,180
for each of those APNs tokens.

225
00:10:27,180 --> 00:10:29,135
Now, you can reach
your iOS devices

226
00:10:29,135 --> 00:10:32,800
via FCM using these
registration tokens.

227
00:10:32,800 --> 00:10:33,433
Really simple.

228
00:10:33,433 --> 00:10:35,558
And you don't even have to
change your application.

229
00:10:35,558 --> 00:10:39,569


230
00:10:39,570 --> 00:10:44,520
So we've covered a lot so far--
our brand-new SDKs, platforms

231
00:10:44,520 --> 00:10:47,640
that are reachable by FCM,
improvements like removing

232
00:10:47,640 --> 00:10:50,410
limits from topic
messaging, API to send

233
00:10:50,410 --> 00:10:55,709
to a combination of topics, and
API to subscribe automatically

234
00:10:55,710 --> 00:11:00,810
from your server side, and an
API to import your APNs tokens.

235
00:11:00,810 --> 00:11:04,109
And before I forget, all
this with FCM is still free.

236
00:11:04,110 --> 00:11:06,680


237
00:11:06,680 --> 00:11:08,839
Now as promised earlier,
let's get into details

238
00:11:08,840 --> 00:11:10,680
on how to use our new SDKs.

239
00:11:10,680 --> 00:11:12,689
And I'd like to invite
Liam on stage for that.

240
00:11:12,690 --> 00:11:16,190


241
00:11:16,190 --> 00:11:20,050
[APPLAUSE]

242
00:11:20,050 --> 00:11:20,920
LIAM BYRNE: Hi.

243
00:11:20,920 --> 00:11:23,589
I'm Liam, and I'd
like to talk about how

244
00:11:23,590 --> 00:11:26,360
to use these APIs in your apps.

245
00:11:26,360 --> 00:11:29,040
For each of Android,
iOS, and C++,

246
00:11:29,040 --> 00:11:32,480
I'll cover the basics
of integrating FCM.

247
00:11:32,480 --> 00:11:35,575
First, we'll cover iOS.

248
00:11:35,575 --> 00:11:37,450
And for all you Android
developers out there,

249
00:11:37,450 --> 00:11:38,199
don't go anywhere.

250
00:11:38,199 --> 00:11:40,510
We'll get to you shortly.

251
00:11:40,510 --> 00:11:42,610
The first thing
that you need to do

252
00:11:42,610 --> 00:11:46,402
is add a dependency on Firebase
Messenging to your podfile.

253
00:11:46,402 --> 00:11:48,860
And now, I know that you've
all been waiting for some code,

254
00:11:48,860 --> 00:11:49,728
so let's move on.

255
00:11:49,728 --> 00:11:52,939


256
00:11:52,940 --> 00:11:55,520
As you already know,
a registration token

257
00:11:55,520 --> 00:11:58,280
is used for sending a message
to a single installation

258
00:11:58,280 --> 00:11:59,880
of your app.

259
00:11:59,880 --> 00:12:02,350
And as Subir mentioned
earlier, we now

260
00:12:02,350 --> 00:12:04,540
automatically get a
token for your app

261
00:12:04,540 --> 00:12:07,319
and handle all the errors
and exponential backoff,

262
00:12:07,320 --> 00:12:11,700
so all you need to do is
call this one function.

263
00:12:11,700 --> 00:12:14,114
And we do the same for
subscribing to a topic.

264
00:12:14,114 --> 00:12:15,780
And we hope that these
improvements will

265
00:12:15,780 --> 00:12:18,140
make things easier for you.

266
00:12:18,140 --> 00:12:20,640
And while these examples and
the ones that I'm going to give

267
00:12:20,640 --> 00:12:23,910
are in Objective-C, we're also
fully compatible with Swift.

268
00:12:23,910 --> 00:12:27,060


269
00:12:27,060 --> 00:12:29,093
To handle token
refresh events, you

270
00:12:29,094 --> 00:12:30,885
need to add an observer
to InstanceIDTokenR

271
00:12:30,885 --> 00:12:31,676
efreshNotification.

272
00:12:31,676 --> 00:12:34,010


273
00:12:34,010 --> 00:12:37,085
This is called if your
token ever changes.

274
00:12:37,085 --> 00:12:38,460
So when you're
implementing this,

275
00:12:38,460 --> 00:12:41,210
you should upload the
token to your server.

276
00:12:41,210 --> 00:12:42,820
This is also called
when we first get

277
00:12:42,820 --> 00:12:45,320
a token on your app's behalf.

278
00:12:45,320 --> 00:12:46,900
So by implementing
this, it means

279
00:12:46,900 --> 00:12:49,569
that you'll always have the
correct version of your app's

280
00:12:49,570 --> 00:12:50,668
token on your server.

281
00:12:50,668 --> 00:12:53,986


282
00:12:53,986 --> 00:12:55,860
Now that you have a
token and have subscribed

283
00:12:55,860 --> 00:12:59,630
to topics, let's move on to how
to receive and send messages.

284
00:12:59,630 --> 00:13:02,600


285
00:13:02,600 --> 00:13:05,150
To receive a message,
you need to implement

286
00:13:05,150 --> 00:13:09,230
the didReceiveRemoteNotification
callback.

287
00:13:09,230 --> 00:13:11,392
Here, you'll get a
userInfo dictionary.

288
00:13:11,392 --> 00:13:13,100
And this will contain
your &quot;from&quot; address

289
00:13:13,100 --> 00:13:14,970
and all your message
payload data.

290
00:13:14,970 --> 00:13:18,600


291
00:13:18,600 --> 00:13:21,870
And to send a message, you
need to call sendMessage.

292
00:13:21,870 --> 00:13:24,666
And here, you pass in
all your payload data,

293
00:13:24,666 --> 00:13:26,540
the &quot;to&quot; address that
starts with your sender

294
00:13:26,540 --> 00:13:31,219
ID, the message ID,
and time to live.

295
00:13:31,220 --> 00:13:33,500
And we will try to send
this message immediately,

296
00:13:33,500 --> 00:13:35,552
and will keep retrying
if there are any errors

297
00:13:35,552 --> 00:13:36,885
until your time to live expires.

298
00:13:36,885 --> 00:13:39,720


299
00:13:39,720 --> 00:13:41,490
Now one thing to be
aware of when you're

300
00:13:41,490 --> 00:13:45,290
using our APIs on iOS is
that we use swizzling,

301
00:13:45,290 --> 00:13:48,209
so integrating FCM can be done
using a single line of code,

302
00:13:48,210 --> 00:13:50,382
and it is very easy
to get started.

303
00:13:50,382 --> 00:13:51,839
What this means is
that we add some

304
00:13:51,840 --> 00:13:54,680
hooks into your app
to automatically call

305
00:13:54,680 --> 00:13:56,671
FCM methods at run time.

306
00:13:56,672 --> 00:13:58,380
But if you want to
disable this, you can.

307
00:13:58,380 --> 00:14:01,137
You just need to add a flag
to your info.plist file.

308
00:14:01,137 --> 00:14:02,719
But if you do this,
make sure that you

309
00:14:02,720 --> 00:14:05,910
call these two methods to
ensure FCM works correctly

310
00:14:05,910 --> 00:14:08,800
in your app.

311
00:14:08,800 --> 00:14:11,270
And here we have a
big green Android.

312
00:14:11,270 --> 00:14:13,010
As you've probably
guessed, I'm going

313
00:14:13,010 --> 00:14:15,360
to talk about using
Android in your apps.

314
00:14:15,360 --> 00:14:19,690
I mean, using FCM in
your Android apps.

315
00:14:19,690 --> 00:14:21,530
So first here, you need
to add a dependency

316
00:14:21,530 --> 00:14:23,079
on Firebase Messaging.

317
00:14:23,080 --> 00:14:25,430
And this time, it's your
app level build.gradle file.

318
00:14:25,430 --> 00:14:29,140


319
00:14:29,140 --> 00:14:32,510
Our Android APIs are very
similar to our ones in iOS,

320
00:14:32,510 --> 00:14:35,580
and we do all the
same-- and we also

321
00:14:35,580 --> 00:14:39,370
automatically get a token for
your app and perform retries.

322
00:14:39,370 --> 00:14:41,540
So all you need to
do is call getToken.

323
00:14:41,540 --> 00:14:43,540
We'll handle the rest.

324
00:14:43,540 --> 00:14:45,439
And likewise with
subscribing to a topic.

325
00:14:45,440 --> 00:14:50,050


326
00:14:50,050 --> 00:14:52,380
To handle token
refresh events, you

327
00:14:52,380 --> 00:14:55,689
need to extend the Firebase
instance ID service

328
00:14:55,690 --> 00:14:58,610
and override onTokenRefresh.

329
00:14:58,610 --> 00:15:01,684
And just as with iOS, here you
should upload your apps token

330
00:15:01,684 --> 00:15:02,308
to your server.

331
00:15:02,308 --> 00:15:05,880


332
00:15:05,880 --> 00:15:10,900
Now let's see how we receive
and send messages on Android.

333
00:15:10,900 --> 00:15:13,480
To receive a message, you
need to extend the Firebase

334
00:15:13,480 --> 00:15:18,000
messaging service,
override onMessageReceived.

335
00:15:18,000 --> 00:15:20,650
And here you'll get a remote
message object from which you

336
00:15:20,650 --> 00:15:22,480
can get the &quot;from&quot;
address, as well as

337
00:15:22,480 --> 00:15:24,850
all the message payload data.

338
00:15:24,850 --> 00:15:27,010
One other thing
to be aware of is

339
00:15:27,010 --> 00:15:29,189
that, when you're seeing
the notification message

340
00:15:29,190 --> 00:15:31,430
and your app is already
in the foreground,

341
00:15:31,430 --> 00:15:34,479
instead of posting it to
the notification tray,

342
00:15:34,480 --> 00:15:36,620
instead we'll call
onMessageReceived

343
00:15:36,620 --> 00:15:39,300
so you can handle the
notification intelligently

344
00:15:39,300 --> 00:15:41,329
while the user
has your app open.

345
00:15:41,330 --> 00:15:43,080
And you can get all
the extra notification

346
00:15:43,080 --> 00:15:44,871
payload by a
RemoteMessage.getNotification.

347
00:15:44,871 --> 00:15:48,470


348
00:15:48,470 --> 00:15:52,210
To send a message, you need to
build a remote message object

349
00:15:52,210 --> 00:15:53,960
and pass it to Send.

350
00:15:53,960 --> 00:15:56,960
Just as on iOS, you
set the &quot;to&quot; address,

351
00:15:56,960 --> 00:16:01,412
the message ID, the time to
live, and your payload data.

352
00:16:01,412 --> 00:16:06,517


353
00:16:06,517 --> 00:16:08,100
Now let's look at
the changes that you

354
00:16:08,100 --> 00:16:10,387
need to make to your
Android manifest.

355
00:16:10,387 --> 00:16:12,469
And I know this has been
a pain point in the past,

356
00:16:12,470 --> 00:16:15,330
with lots of copy-pasted
permissions and receivers.

357
00:16:15,330 --> 00:16:18,560
But now, all you need to do is
add one entry for your Firebase

358
00:16:18,560 --> 00:16:21,780
instance ID service, and one
for your Firebase messaging

359
00:16:21,780 --> 00:16:25,209
service, just like any
other Android service.

360
00:16:25,210 --> 00:16:25,800
And that's it.

361
00:16:25,800 --> 00:16:26,299
You're done.

362
00:16:26,299 --> 00:16:29,420


363
00:16:29,420 --> 00:16:33,000
For all you C++ developers,
on both iOS and Android,

364
00:16:33,000 --> 00:16:36,090
as Subir talked about, we
have an API for you, too.

365
00:16:36,090 --> 00:16:40,250
On iOS, this has all the
bridging to Objective-C APIs,

366
00:16:40,250 --> 00:16:43,640
and on Android it does all the
JNI work of talking to our Java

367
00:16:43,640 --> 00:16:47,460
APIs, and also includes proxy
classes that pass the messages

368
00:16:47,460 --> 00:16:49,001
to your C++ code.

369
00:16:49,001 --> 00:16:50,770
And we've made all
these changes to make

370
00:16:50,770 --> 00:16:54,100
your life a little bit easier.

371
00:16:54,100 --> 00:16:57,452
So to link in the
C++ SDK, on iOS,

372
00:16:57,452 --> 00:16:59,660
you need to drag these two
frameworks into your XCode

373
00:16:59,660 --> 00:17:01,180
project.

374
00:17:01,180 --> 00:17:04,470
And on Android, you need to link
to these two static libraries

375
00:17:04,470 --> 00:17:06,760
and add the proxy
classes to your manifest.

376
00:17:06,760 --> 00:17:09,270


377
00:17:09,270 --> 00:17:12,050
When your app starts, you
need to initialize Firebase

378
00:17:12,050 --> 00:17:14,300
messaging by passing
in a Firebase app

379
00:17:14,300 --> 00:17:17,089
object and a listener class.

380
00:17:17,089 --> 00:17:19,629
Know that when you create
the Firebase app on Android,

381
00:17:19,630 --> 00:17:23,270
you also need to pass in the
JNI environment and an activity,

382
00:17:23,270 --> 00:17:25,598
but these are the only
differences between the APIs

383
00:17:25,598 --> 00:17:27,750
on each platform.

384
00:17:27,750 --> 00:17:31,220
The listener class has callbacks
they use for handling a message

385
00:17:31,220 --> 00:17:32,510
and for handling new tokens.

386
00:17:32,510 --> 00:17:36,250
But we'll give you an
example of that in a moment.

387
00:17:36,250 --> 00:17:38,430
Now that you have
the SDK set up,

388
00:17:38,430 --> 00:17:40,400
how about subscribing
to a topic?

389
00:17:40,400 --> 00:17:42,450
And again, this is
a simple one-liner.

390
00:17:42,450 --> 00:17:44,960
And just like in
Objective-C and Java,

391
00:17:44,960 --> 00:17:47,145
we will keep retrying if
there are any failures.

392
00:17:47,145 --> 00:17:49,742


393
00:17:49,742 --> 00:17:51,450
Here is an example of
that listener class

394
00:17:51,450 --> 00:17:54,330
that I talked about earlier.

395
00:17:54,330 --> 00:17:56,000
You need to implement
onMessage, where

396
00:17:56,000 --> 00:17:57,640
you'll get a message struct.

397
00:17:57,640 --> 00:18:00,060
And that will contain the
from address and the message

398
00:18:00,060 --> 00:18:01,281
payload.

399
00:18:01,281 --> 00:18:03,379
And you also need to
implement onTokenReceived,

400
00:18:03,380 --> 00:18:07,620
where you should upload
the token to your server.

401
00:18:07,620 --> 00:18:10,850
To send a message, you create
a message struct and pass it

402
00:18:10,850 --> 00:18:11,597
to Send.

403
00:18:11,597 --> 00:18:13,180
And this takes all
the same parameters

404
00:18:13,180 --> 00:18:15,305
that I talked about earlier.

405
00:18:15,305 --> 00:18:17,680
Now, there are a couple things
to be aware of when you're

406
00:18:17,680 --> 00:18:20,610
implementing FCM in your apps.

407
00:18:20,610 --> 00:18:23,840
First is to make sure that you
handle token refresh events.

408
00:18:23,840 --> 00:18:26,280
This will make your
app more secure,

409
00:18:26,280 --> 00:18:28,910
and ensure that you always have
the right version of the token,

410
00:18:28,910 --> 00:18:31,880
so your users will
never miss messages.

411
00:18:31,880 --> 00:18:35,190
And second is don't try to
use our new FCM APIs as well

412
00:18:35,190 --> 00:18:36,380
as the old GCM ones.

413
00:18:36,380 --> 00:18:40,240
Otherwise, you might get
some unexpected behavior.

414
00:18:40,240 --> 00:18:42,110
But don't just take it from me.

415
00:18:42,110 --> 00:18:45,199
Hear from three of our partners
that have already successfully

416
00:18:45,200 --> 00:18:47,670
integrated FCM into their apps.

417
00:18:47,670 --> 00:18:51,620
First is &quot;Le Figaro,&quot; the
oldest French daily newspaper.

418
00:18:51,620 --> 00:18:53,810
And they talk about how
trustworthy and reliable

419
00:18:53,810 --> 00:18:54,831
a tool FCM is.

420
00:18:54,831 --> 00:18:59,260


421
00:18:59,260 --> 00:19:01,540
Next, we have Kwaver,
an app to help

422
00:19:01,540 --> 00:19:05,060
you create music and collaborate
with other musicians.

423
00:19:05,060 --> 00:19:06,500
And they talk
about how simple it

424
00:19:06,500 --> 00:19:08,970
was to migrate from their
previous messaging platform

425
00:19:08,970 --> 00:19:09,470
to FCM.

426
00:19:09,470 --> 00:19:12,070


427
00:19:12,070 --> 00:19:13,879
And last, we have
Fabulous, an app

428
00:19:13,880 --> 00:19:16,982
to help you create healthy
habits in your life, who

429
00:19:16,982 --> 00:19:19,190
talk about how convenient
it is to have one messaging

430
00:19:19,190 --> 00:19:22,271
platform that talks to
both iOS and Android.

431
00:19:22,271 --> 00:19:24,020
And now I'll pass the
floor back to Subir.

432
00:19:24,020 --> 00:19:27,830


433
00:19:27,830 --> 00:19:31,340
[APPLAUSE]

434
00:19:31,340 --> 00:19:32,377


435
00:19:32,377 --> 00:19:33,460
SUBIR JHANB: Thanks, Liam.

436
00:19:33,460 --> 00:19:35,440
That was fabulous.

437
00:19:35,440 --> 00:19:38,800
So we've covered in detail how
to use our SDKs, platforms,

438
00:19:38,800 --> 00:19:40,542
and improvements in FCM.

439
00:19:40,542 --> 00:19:42,250
Let's talk a little
about our integration

440
00:19:42,250 --> 00:19:45,550
with other Firebase products.

441
00:19:45,550 --> 00:19:47,860
This is a Firebase
console, and it's

442
00:19:47,860 --> 00:19:51,139
designed to make integrating
these products very easy,

443
00:19:51,140 --> 00:19:54,030
and simplify your
app management.

444
00:19:54,030 --> 00:19:56,710
As you can see, you can access
all your project settings

445
00:19:56,710 --> 00:19:58,770
in one place.

446
00:19:58,770 --> 00:20:00,240
And here's a URL to access it.

447
00:20:00,240 --> 00:20:02,810


448
00:20:02,810 --> 00:20:04,520
Specifically for
cloud messaging,

449
00:20:04,520 --> 00:20:08,160
you can see all your
settings in this one page.

450
00:20:08,160 --> 00:20:10,734
You can see your server
key and sender ID.

451
00:20:10,734 --> 00:20:12,149
And these are the
same credentials

452
00:20:12,150 --> 00:20:15,910
you use when you
authenticate on the backends.

453
00:20:15,910 --> 00:20:18,520
iOS developers can upload
their APNs certificates

454
00:20:18,520 --> 00:20:21,040
right here so we can
successfully send messages

455
00:20:21,040 --> 00:20:24,220
to your iOS devices.

456
00:20:24,220 --> 00:20:26,682
And there is this
notifications on the left menu.

457
00:20:26,682 --> 00:20:27,920
Hm.

458
00:20:27,920 --> 00:20:30,790
Now, what is that?

459
00:20:30,790 --> 00:20:33,500
This is Firebase
notifications, and it's

460
00:20:33,500 --> 00:20:36,400
built on top of Firebase
Cloud Messaging.

461
00:20:36,400 --> 00:20:39,730
It's a very easy-to-use tool
to create user engagement

462
00:20:39,730 --> 00:20:43,710
campaigns, target a segment
of your users, et cetera.

463
00:20:43,710 --> 00:20:45,650
Let me show you.

464
00:20:45,650 --> 00:20:46,890
This is what it looks like.

465
00:20:46,890 --> 00:20:48,800
It's a very simple web console.

466
00:20:48,800 --> 00:20:51,899
You can create a campaign
for now or later.

467
00:20:51,900 --> 00:20:56,000
You can send messages to a user
segment that you can create.

468
00:20:56,000 --> 00:20:58,414
It can be all users
with an app version

469
00:20:58,414 --> 00:21:00,330
or with a combination
of application versions,

470
00:21:00,330 --> 00:21:02,850
all users with a
Firebase audience,

471
00:21:02,850 --> 00:21:05,320
all users running a
particular language

472
00:21:05,320 --> 00:21:07,820
on their devices, et cetera.

473
00:21:07,820 --> 00:21:11,149
You can also send
messages to a topic,

474
00:21:11,150 --> 00:21:13,260
and also to a single device.

475
00:21:13,260 --> 00:21:15,760
And that's very useful when
you're debugging or developing

476
00:21:15,760 --> 00:21:18,690
or testing your application.

477
00:21:18,690 --> 00:21:21,570
And not only can you send
messages using this campaign,

478
00:21:21,570 --> 00:21:24,939
you can also see how
effective they are.

479
00:21:24,940 --> 00:21:27,380
You can now see how many
messages were actually

480
00:21:27,380 --> 00:21:31,550
sent using your campaign,
how many users clicked on it,

481
00:21:31,550 --> 00:21:34,830
how many opened it, and how many
users went through a conversion

482
00:21:34,830 --> 00:21:35,552
event.

483
00:21:35,552 --> 00:21:37,010
A conversion event
can be something

484
00:21:37,010 --> 00:21:40,629
you define, like an ad
click or an in-app purchases

485
00:21:40,630 --> 00:21:42,630
or something like that.

486
00:21:42,630 --> 00:21:44,600
And now, you can
calibrate and see

487
00:21:44,600 --> 00:21:46,629
if your notification
strategy has been working

488
00:21:46,630 --> 00:21:49,180
the way you wanted it to.

489
00:21:49,180 --> 00:21:51,400
It's really powerful.

490
00:21:51,400 --> 00:21:54,430
And all this rich data is made
available with our integration

491
00:21:54,430 --> 00:21:57,110
with Firebase Notif-- Analytics.

492
00:21:57,110 --> 00:21:59,780
Firebase Analytics.

493
00:21:59,780 --> 00:22:01,780
There is another talk on
Firebase Notifications

494
00:22:01,780 --> 00:22:04,160
tomorrow, which is
going to go into details

495
00:22:04,160 --> 00:22:07,024
of all the powerful features
available on this console.

496
00:22:07,024 --> 00:22:08,814
So if you're interested,
please go to them.

497
00:22:08,815 --> 00:22:11,490


498
00:22:11,490 --> 00:22:14,070
Everything we talked about
and all the other details

499
00:22:14,070 --> 00:22:17,080
are available at our brand-new
documentation website.

500
00:22:17,080 --> 00:22:19,300
Please check it out
at firebase.google.com

501
00:22:19,300 --> 00:22:22,550
under Cloud Messaging.

502
00:22:22,550 --> 00:22:25,659
And these are the talks that I
mentioned during the session.

503
00:22:25,660 --> 00:22:27,530
If you are interested
in push notifications,

504
00:22:27,530 --> 00:22:30,700
I highly recommend
going to these talks.

505
00:22:30,700 --> 00:22:33,390
I hope you are all excited
about Firebase Cloud Messaging

506
00:22:33,390 --> 00:22:35,317
and enjoyed this talk.

507
00:22:35,317 --> 00:22:36,150
Thank you very much.

508
00:22:36,150 --> 00:22:39,720
And let's open the
floor for questions.

509
00:22:39,720 --> 00:22:42,432
[APPLAUSE]

510
00:22:42,432 --> 00:22:44,540
FEMALE SPEAKER: So if
you have any questions,

511
00:22:44,540 --> 00:22:46,081
you can go to the
center of the room.

512
00:22:46,081 --> 00:22:48,080
There's a mic.

513
00:22:48,080 --> 00:22:49,164
And line up for that.

514
00:22:49,164 --> 00:22:55,787


515
00:22:55,787 --> 00:22:57,870
AUDIENCE: Is it
possible-- hello?

516
00:22:57,870 --> 00:22:58,620
SUBIR JHANB: Yeah.

517
00:22:58,620 --> 00:23:02,219
AUDIENCE: Is it possible to
use Firebase Cloud Messaging

518
00:23:02,220 --> 00:23:05,560
to send messages
to our users who

519
00:23:05,560 --> 00:23:08,760
are on a Safari or a
Firefox web browser?

520
00:23:08,760 --> 00:23:12,610
We don't need the desktop
notifications just

521
00:23:12,610 --> 00:23:14,090
to send data to
those [INAUDIBLE]?

522
00:23:14,090 --> 00:23:15,500
SUBIR JHANB: No, not
with FCM, because FCM

523
00:23:15,500 --> 00:23:17,420
implements the Web Push
API, which is already

524
00:23:17,420 --> 00:23:18,540
integrated in Chromium.

525
00:23:18,540 --> 00:23:21,389
So any Chromium-based
browser, it's possible.

526
00:23:21,390 --> 00:23:22,000
AUDIENCE: OK.

527
00:23:22,000 --> 00:23:22,310
Just Chrome.

528
00:23:22,310 --> 00:23:22,809
Got it.

529
00:23:22,809 --> 00:23:25,879


530
00:23:25,880 --> 00:23:28,717
AUDIENCE: For the conditions
on topic messaging,

531
00:23:28,717 --> 00:23:30,550
you said there was &quot;and&quot;
and there was &quot;or&quot;.

532
00:23:30,550 --> 00:23:31,205
SUBIR JHANB: &quot;Or.&quot;

533
00:23:31,205 --> 00:23:32,955
AUDIENCE: Is there any
plans for something

534
00:23:32,955 --> 00:23:36,510
like &quot;and not,&quot; where I
want to send to these two,

535
00:23:36,510 --> 00:23:38,896
but not this third one?

536
00:23:38,896 --> 00:23:40,770
SUBIR JHANB: We haven't--
that's a good idea.

537
00:23:40,770 --> 00:23:41,730
I'm going to take your feedback.

538
00:23:41,730 --> 00:23:42,380
But we don't have it today.

539
00:23:42,380 --> 00:23:43,280
AUDIENCE: OK.

540
00:23:43,280 --> 00:23:44,285
SUBIR JHANB: It's
&quot;and&quot; and &quot;ors.&quot;

541
00:23:44,285 --> 00:23:44,580
AUDIENCE: Yeah.

542
00:23:44,580 --> 00:23:46,370
SUBIR JHANB: And you
can use two operators,

543
00:23:46,371 --> 00:23:50,064
so you can have three
topics in the condition.

544
00:23:50,064 --> 00:23:50,855
AUDIENCE: Hi there.

545
00:23:50,855 --> 00:23:51,630
Short question.

546
00:23:51,630 --> 00:23:55,150
Do you have any recommendations
to migrate from GCM and APN

547
00:23:55,150 --> 00:23:56,045
to FCM now?

548
00:23:56,045 --> 00:23:59,360
Because then if a user doesn't
update his app, you have,

549
00:23:59,360 --> 00:24:01,969
like, three systems to
manage instead of only one.

550
00:24:01,970 --> 00:24:03,470
SUBIR JHANB: Yeah, there are
migration guides available

551
00:24:03,470 --> 00:24:04,095
on our website.

552
00:24:04,095 --> 00:24:05,210
AUDIENCE: OK.

553
00:24:05,210 --> 00:24:07,234
SUBIR JHANB: Yeah, of
both iOS and Android.

554
00:24:07,234 --> 00:24:08,899
LIAM BYRNE: We're
still going to support

555
00:24:08,900 --> 00:24:11,639
GCM for the foreseeable future.

556
00:24:11,639 --> 00:24:13,179
But if I was writing
a new app today,

557
00:24:13,180 --> 00:24:14,769
I would use Firebase
Cloud Messaging.

558
00:24:14,769 --> 00:24:15,310
AUDIENCE: OK.

559
00:24:15,310 --> 00:24:18,810


560
00:24:18,810 --> 00:24:21,210
AUDIENCE: So do you know what
the foreseeable future is?

561
00:24:21,210 --> 00:24:25,280
Like currently, I have Google
Play Services location and GCM

562
00:24:25,280 --> 00:24:26,014
messaging.

563
00:24:26,015 --> 00:24:30,430
Now I'll have Firebase messaging
and Google Play Services

564
00:24:30,430 --> 00:24:35,010
location, which will then both
pull the cores from GCM core--

565
00:24:35,010 --> 00:24:37,411
or from Google Play Services
core and Firebase core,

566
00:24:37,411 --> 00:24:37,910
correct?

567
00:24:37,910 --> 00:24:38,660
SUBIR JHANB: Yeah.

568
00:24:38,660 --> 00:24:41,867
AUDIENCE: So but if I wanted
to stay on GCM, how long ish?

569
00:24:41,867 --> 00:24:43,200
SUBIR JHANB: You can stay there.

570
00:24:43,200 --> 00:24:45,870
There's no reason that it
should stop working or anything.

571
00:24:45,870 --> 00:24:47,620
But again, if you are
writing from scratch

572
00:24:47,620 --> 00:24:49,399
and you have new apps,
you should use FCM.

573
00:24:49,400 --> 00:24:50,040
AUDIENCE: Right on.

574
00:24:50,040 --> 00:24:52,040
LIAM BYRNE: There will
still be a version of GCM

575
00:24:52,040 --> 00:24:54,320
and Google Play Services
in the newer releases

576
00:24:54,320 --> 00:24:56,090
that are coming
out, but it's not

577
00:24:56,090 --> 00:24:57,367
going to get any new features.

578
00:24:57,367 --> 00:24:58,200
AUDIENCE: Thank you.

579
00:24:58,200 --> 00:25:00,828


580
00:25:00,828 --> 00:25:01,710
AUDIENCE: Hi.

581
00:25:01,710 --> 00:25:03,870
In the past, GCM was only
available for devices--

582
00:25:03,870 --> 00:25:06,379
or Android devices
with Play Services.

583
00:25:06,380 --> 00:25:10,370
Does Firebase still
have that limitation?

584
00:25:10,370 --> 00:25:11,060
LIAM BYRNE: Yes.

585
00:25:11,060 --> 00:25:11,810
SUBIR JHANB: Yeah.

586
00:25:11,810 --> 00:25:12,379
We do have that limitation.

587
00:25:12,380 --> 00:25:13,020
AUDIENCE: OK.

588
00:25:13,020 --> 00:25:13,520
Thanks.

589
00:25:13,520 --> 00:25:19,480


590
00:25:19,480 --> 00:25:20,630
SUBIR JHANB: All right.

591
00:25:20,630 --> 00:25:21,838
Thank you very much everyone.

592
00:25:21,838 --> 00:25:23,430
Have a good day.

593
00:25:23,430 --> 00:25:25,230
[APPLAUSE]

594
00:25:25,230 --> 00:25:27,030


595
00:25:27,030 --> 00:25:30,680
[MUSIC PLAYING]

596
00:25:30,680 --> 00:25:41,339


