1
00:00:00,000 --> 00:00:02,935
[MUSIC PLAYING]

2
00:00:02,935 --> 00:00:04,310
GEORGE MOUNT:
Hello everyone, I'm

3
00:00:04,310 --> 00:00:07,830
George Mount from
the UI Toolkit team,

4
00:00:07,830 --> 00:00:12,610
and I'm here to talk to you
about Android Data Binding.

5
00:00:12,610 --> 00:00:17,410
Before we started this I
sought some random Android

6
00:00:17,410 --> 00:00:21,380
developer out there for
some help in this talk

7
00:00:21,380 --> 00:00:23,240
and I'd like to
introduce you to-- I'm

8
00:00:23,240 --> 00:00:24,419
sorry what was your name?

9
00:00:24,420 --> 00:00:26,320
YGIT BOYAR: Random123.

10
00:00:26,320 --> 00:00:28,524
GEORGE MOUNT: Random123,
why don't you come up here?

11
00:00:28,524 --> 00:00:31,400
[APPLAUSE]

12
00:00:31,400 --> 00:00:32,460


13
00:00:32,460 --> 00:00:36,610
I stole-- I hope you don't mind,
I have some friends in the NSA,

14
00:00:36,610 --> 00:00:39,960
I looked at your laptop and
put it up here on the screen.

15
00:00:39,960 --> 00:00:42,180
You guys, don't tell anyone.

16
00:00:42,180 --> 00:00:44,230
YGIT BOYAR: My code.

17
00:00:44,230 --> 00:00:46,120
So, I love Android.

18
00:00:46,120 --> 00:00:48,129
I love that little green robot.

19
00:00:48,130 --> 00:00:51,580
But as a developer, some
parts I feel are terrible.

20
00:00:51,580 --> 00:00:54,019
I'm writing so
much code, George.

21
00:00:54,020 --> 00:00:55,440
It's like, why is
this like this?

22
00:00:55,440 --> 00:00:58,529
Why all this stupid code here?

23
00:00:58,529 --> 00:00:59,320
Why do I need that?

24
00:00:59,320 --> 00:01:02,080


25
00:01:02,080 --> 00:01:06,340
Like this product image: Set
that, set this, set this.

26
00:01:06,340 --> 00:01:08,300
Did I study computer
science for this?

27
00:01:08,300 --> 00:01:09,009
I don't think so.

28
00:01:09,010 --> 00:01:11,254
GEORGE MOUNT: No.

29
00:01:11,254 --> 00:01:13,420
We've got to have something
better than that, right?

30
00:01:13,420 --> 00:01:14,500
YGIT BOYAR: We have
something in the box.

31
00:01:14,500 --> 00:01:15,430
GEORGE MOUNT: I do!

32
00:01:15,430 --> 00:01:17,705
Let's talk about Android
Data Binding, OK?

33
00:01:17,705 --> 00:01:23,690


34
00:01:23,690 --> 00:01:26,740
All right, let's look at your
code in a little bit of detail.

35
00:01:26,740 --> 00:01:29,020
I see this set
product UI you are

36
00:01:29,020 --> 00:01:31,990
using calling from onCreate.

37
00:01:31,990 --> 00:01:34,399
That's just a pain,
let's get rid of it.

38
00:01:34,400 --> 00:01:35,810
We don't want that.

39
00:01:35,810 --> 00:01:38,560
Instead, let's look
at this onCreate.

40
00:01:38,560 --> 00:01:43,590
Let's, instead, just bind your
layout to this binding code

41
00:01:43,590 --> 00:01:45,770
and then set the
product on there

42
00:01:45,770 --> 00:01:49,250
and let the binding take
care of all the work.

43
00:01:49,250 --> 00:01:49,839
Sound good?

44
00:01:49,839 --> 00:01:50,505
A little better?

45
00:01:50,505 --> 00:01:51,880
YGIT BOYAR: Let's
see about that.

46
00:01:51,880 --> 00:01:53,570
I'm skeptical.

47
00:01:53,570 --> 00:01:55,820
GEORGE MOUNT: Let's
look at your layout.

48
00:01:55,820 --> 00:01:58,070
Wow, you have a lot of
ellipses in your layout, man.

49
00:01:58,070 --> 00:02:01,119
What's up with that?

50
00:02:01,120 --> 00:02:03,940
To make sure that we understand
that it's a data binding

51
00:02:03,940 --> 00:02:08,880
layout, first we add this
layout tag to the outside,

52
00:02:08,880 --> 00:02:11,950
and then we get this
variable, the prod variable,

53
00:02:11,950 --> 00:02:15,560
that we set in onCreate.

54
00:02:15,560 --> 00:02:18,030
And then we can use
that prod variable

55
00:02:18,030 --> 00:02:19,240
anywhere in our layout.

56
00:02:19,240 --> 00:02:25,480
So instead of this ID we can
now access that prod variable.

57
00:02:25,480 --> 00:02:28,600
So, for example, in the
source it's an image problem

58
00:02:28,600 --> 00:02:31,810
so we can access it directly.

59
00:02:31,810 --> 00:02:34,590
The product name, it's a string.

60
00:02:34,590 --> 00:02:36,790
And same with the description.

61
00:02:36,790 --> 00:02:39,579
YGIT BOYAR: There
is a bug, though.

62
00:02:39,580 --> 00:02:40,240
There you go.

63
00:02:40,240 --> 00:02:43,500
You set a price, it's a crash.

64
00:02:43,500 --> 00:02:44,720
GEORGE MOUNT: Shoot.

65
00:02:44,720 --> 00:02:49,300
All right, well our price is--
if you look at the code there

66
00:02:49,300 --> 00:02:50,840
it's a resource, right?

67
00:02:50,840 --> 00:02:55,156
And our resource is a string
and it's doing a format.

68
00:02:55,156 --> 00:02:57,030
We should do better in
our expression, right?

69
00:02:57,030 --> 00:02:58,030
YGIT BOYAR: I expect so.

70
00:02:58,030 --> 00:02:59,730
GEORGE MOUNT: I think so.

71
00:02:59,730 --> 00:03:03,899
One good thing is that now
we can access our layout--

72
00:03:03,900 --> 00:03:05,900
our expression stuff
directly in our layout.

73
00:03:05,900 --> 00:03:07,941
So we can have this access
to the string resource

74
00:03:07,941 --> 00:03:09,730
right there, and
pass a parameter.

75
00:03:09,730 --> 00:03:12,714
We're passing the product price
as a parameter in our resource,

76
00:03:12,714 --> 00:03:14,390
in our layout.

77
00:03:14,390 --> 00:03:15,483
Pretty cool, huh?

78
00:03:15,484 --> 00:03:18,244


79
00:03:18,244 --> 00:03:19,910
YGIT BOYAR: But in
my application things

80
00:03:19,910 --> 00:03:21,478
are not always starting, George.

81
00:03:21,478 --> 00:03:23,280
I'm cool with your demo.

82
00:03:23,280 --> 00:03:25,160
But I have this
application, sometimes

83
00:03:25,160 --> 00:03:26,910
I have a different layout.

84
00:03:26,910 --> 00:03:27,859
Yes, there you go.

85
00:03:27,860 --> 00:03:28,930
It might be on sale.

86
00:03:28,930 --> 00:03:30,250
How do I do this?

87
00:03:30,250 --> 00:03:32,802
I need to write more
code to do this.

88
00:03:32,802 --> 00:03:34,510
GEORGE MOUNT: Whine,
whine, whine, whine.

89
00:03:34,510 --> 00:03:37,510
You want everything, don't you?

90
00:03:37,510 --> 00:03:39,810
We allow you,
inside your layout,

91
00:03:39,810 --> 00:03:41,520
to have some little
dynamism in there.

92
00:03:41,520 --> 00:03:45,300
You can have an expression
that says, if you're on sale

93
00:03:45,300 --> 00:03:47,700
then show this on sale
sign, and if you're on sale

94
00:03:47,700 --> 00:03:50,566
you might also have a
different color for your price.

95
00:03:50,566 --> 00:03:53,190
YGIT BOYAR: Your example is not
very realistic because my price

96
00:03:53,190 --> 00:03:55,460
changes, we're a
dynamic website.

97
00:03:55,460 --> 00:03:56,940
So I do dynamic pricing.

98
00:03:56,940 --> 00:03:57,930
How you handle that?

99
00:03:57,930 --> 00:03:59,930
GEORGE MOUNT: Well, you
have to at least tell us

100
00:03:59,930 --> 00:04:01,020
when it changes.

101
00:04:01,020 --> 00:04:02,270
So let's look at your product.

102
00:04:02,270 --> 00:04:07,850
Your product has a price
and name and image.

103
00:04:07,850 --> 00:04:10,400
You have to just extend
the base observable class,

104
00:04:10,400 --> 00:04:12,320
and then we mark
the things that you

105
00:04:12,320 --> 00:04:15,084
can change that are going
to change as bindable.

106
00:04:15,084 --> 00:04:16,959
And then you have to
tell us when it changes.

107
00:04:16,959 --> 00:04:20,519
So we have this notify property
change and the bindable part--

108
00:04:20,519 --> 00:04:22,710
YGIT BOYAR: But my classes
extend the base class.

109
00:04:22,710 --> 00:04:26,349
I can't extend your class,
that is not possible.

110
00:04:26,350 --> 00:04:27,800
GEORGE MOUNT: Come on!

111
00:04:27,800 --> 00:04:29,460
All right, all right, fine.

112
00:04:29,460 --> 00:04:32,190
We can use an observable
interface instead.

113
00:04:32,190 --> 00:04:32,924
Is that better?

114
00:04:32,924 --> 00:04:34,590
YGIT BOYAR: Maybe,
let's see about that.

115
00:04:34,590 --> 00:04:35,830
GEORGE MOUNT: We'll give you
a little bit of help here.

116
00:04:35,830 --> 00:04:38,109
We'll give you this
property change registry

117
00:04:38,110 --> 00:04:41,600
so you can just tell
us when that happens.

118
00:04:41,600 --> 00:04:43,580
YGIT BOYAR: Yeah,
that's good enough.

119
00:04:43,580 --> 00:04:45,121
GEORGE MOUNT: That's
a little better.

120
00:04:45,121 --> 00:04:49,549


121
00:04:49,550 --> 00:04:51,430
This is a little easier.

122
00:04:51,430 --> 00:04:53,930
It would be nice if we
could just have properties

123
00:04:53,930 --> 00:04:55,730
that are themselves observable.

124
00:04:55,730 --> 00:04:57,525
Wouldn't it be?

125
00:04:57,525 --> 00:04:59,650
Here you can access them
as if it was just the same

126
00:04:59,650 --> 00:05:01,590
with the same expression.

127
00:05:01,590 --> 00:05:03,849
You just say your
prod.image, and even

128
00:05:03,850 --> 00:05:07,772
though it's not a
drawable itself we

129
00:05:07,772 --> 00:05:08,980
pretend that it's a drawable.

130
00:05:08,980 --> 00:05:12,330
It's an observable field
and it's observable double.

131
00:05:12,330 --> 00:05:13,690
Double for price?

132
00:05:13,690 --> 00:05:15,440
YGIT BOYAR: Did you
just double the price?

133
00:05:15,440 --> 00:05:16,830
[LAUGHS]

134
00:05:16,830 --> 00:05:19,371
GEORGE MOUNT: You shouldn't be
using doubles for your prices.

135
00:05:19,371 --> 00:05:20,990


136
00:05:20,990 --> 00:05:23,090
Or, if you have
more blobby data,

137
00:05:23,090 --> 00:05:25,012
like let's imagine
coming from JSON

138
00:05:25,012 --> 00:05:26,470
and you're still
doing development,

139
00:05:26,470 --> 00:05:28,011
everything's up in
the air, you don't

140
00:05:28,011 --> 00:05:31,210
know what it's going to
be like you can use a map.

141
00:05:31,210 --> 00:05:34,669
And that's pretty
nice for prototyping.

142
00:05:34,670 --> 00:05:35,920
YGIT BOYAR: Seems interesting.

143
00:05:35,920 --> 00:05:38,170
How about multiple layouts?

144
00:05:38,170 --> 00:05:40,470
GEORGE MOUNT: Multiple layouts?

145
00:05:40,470 --> 00:05:44,240
I guess you have two
different variables

146
00:05:44,240 --> 00:05:45,196
and different layouts.

147
00:05:45,196 --> 00:05:47,220
YGIT BOYAR: So I like
two activities now?

148
00:05:47,220 --> 00:05:47,710
GEORGE MOUNT: I hope not.

149
00:05:47,710 --> 00:05:49,335
Boy, that would be
a pain, wouldn't it?

150
00:05:49,335 --> 00:05:50,989


151
00:05:50,989 --> 00:05:53,030
In one you're setting a
product and the other one

152
00:05:53,030 --> 00:05:55,289
you're setting the product
list, it's really a pain.

153
00:05:55,290 --> 00:05:56,790
You don't want to
have to do if it's

154
00:05:56,790 --> 00:06:01,440
on the left-- landscape do this,
and if your portrait do this.

155
00:06:01,440 --> 00:06:06,190
So instead what we do is we
merge all of your variables

156
00:06:06,190 --> 00:06:09,469
and we produce one that has the
summation of all the variables

157
00:06:09,470 --> 00:06:13,230
that you need, and the
binding will just say,

158
00:06:13,230 --> 00:06:15,270
&quot;Oh, I only need
these what variables,

159
00:06:15,270 --> 00:06:17,840
and I'll use those in my layout.

160
00:06:17,840 --> 00:06:19,979
The rest of them I'll
just not use at all.&quot;

161
00:06:19,980 --> 00:06:22,550
You just set it and
forget it, it's great.

162
00:06:22,550 --> 00:06:25,370
Just like Ronco, right?

163
00:06:25,370 --> 00:06:27,150
YGIT BOYAR: That seems good.

164
00:06:27,150 --> 00:06:30,625
Talk about the down sides.

165
00:06:30,625 --> 00:06:32,166
GEORGE MOUNT: But
wait, there's more.

166
00:06:32,166 --> 00:06:35,980


167
00:06:35,980 --> 00:06:38,200
You don't need to do any
more findViewByID() right?

168
00:06:38,200 --> 00:06:40,430
Because now all your
expressions are right there

169
00:06:40,430 --> 00:06:41,493
in your layout file.

170
00:06:41,493 --> 00:06:43,890
YGIT BOYAR: Yeah
but I run animations

171
00:06:43,890 --> 00:06:46,406
and also put them
into the data binding.

172
00:06:46,406 --> 00:06:48,220
It seems weird.

173
00:06:48,220 --> 00:06:50,900
GEORGE MOUNT: Well, OK.

174
00:06:50,900 --> 00:06:52,669
You still don't
need findViewByID().

175
00:06:52,670 --> 00:06:59,170
If you have a layout a view with
a tag ID in it, then what we do

176
00:06:59,170 --> 00:07:01,760
is we automatically
extract that view

177
00:07:01,760 --> 00:07:04,954
and stick it as a public
static-- final field

178
00:07:04,954 --> 00:07:05,620
in your binding.

179
00:07:05,620 --> 00:07:07,710
So you can access it
directly from binding.

180
00:07:07,710 --> 00:07:08,330
YGIT BOYAR: That sounds good.

181
00:07:08,330 --> 00:07:10,099
GEORGE MOUNT: You really don't
need findViewByID() anymore.

182
00:07:10,100 --> 00:07:12,182
YGIT BOYAR: I don't
write that code.

183
00:07:12,182 --> 00:07:15,200
GEORGE MOUNT: That stuff
is a pain, isn't it?

184
00:07:15,200 --> 00:07:19,099
Also, we have these
automatic properties.

185
00:07:19,100 --> 00:07:21,140
For example, here is
this DrawerLayout,

186
00:07:21,140 --> 00:07:25,880
and there's this is really
nice setter-- setScrimColor.

187
00:07:25,880 --> 00:07:29,510
Wouldn't it be nice to
be able to just tag it

188
00:07:29,510 --> 00:07:34,190
so you could just set it right
there in your layout file?

189
00:07:34,190 --> 00:07:36,410
There's no attribute for that.

190
00:07:36,410 --> 00:07:41,540
Well, we can just kind of sneak
in and say, &quot;Oh, setScrimColor.

191
00:07:41,540 --> 00:07:43,700
That looks a lot like
a scrim color, right?

192
00:07:43,700 --> 00:07:45,750
Just to set it right
in front of it.&quot;

193
00:07:45,750 --> 00:07:49,670
So we just look at it
say, &quot;setScrimColor.&quot;

194
00:07:49,670 --> 00:07:51,170
Automatically we
just say, OK if you

195
00:07:51,170 --> 00:07:55,990
have this thing with a data
binding expression in it,

196
00:07:55,990 --> 00:07:59,830
then we will look for the set
center with it, that takes

197
00:07:59,830 --> 00:08:01,770
of the same type of parameter.

198
00:08:01,770 --> 00:08:04,099
So in this case the
color scrim is an int,

199
00:08:04,100 --> 00:08:05,766
so we say setScrimColor.

200
00:08:05,766 --> 00:08:06,890
We know exactly what it is.

201
00:08:06,890 --> 00:08:08,473
It's just automatic
for you, you don't

202
00:08:08,473 --> 00:08:12,450
have to create this new
attribute for yourself.

203
00:08:12,450 --> 00:08:16,560
And everyone's
favorite on click.

204
00:08:16,560 --> 00:08:18,930
Pretty awesome.

205
00:08:18,930 --> 00:08:19,920
YGIT BOYAR: Infamous.

206
00:08:19,920 --> 00:08:21,503
GEORGE MOUNT: So we
have this as well,

207
00:08:21,503 --> 00:08:25,260
we can do onClick
with expressions.

208
00:08:25,260 --> 00:08:27,460
Pretty nice.

209
00:08:27,460 --> 00:08:29,570
YGIT BOYAR: How does it work?

210
00:08:29,570 --> 00:08:32,891
GEORGE MOUNT: I think we'll
talk about that in a little bit.

211
00:08:32,892 --> 00:08:34,600
We have all the other
event handlers too,

212
00:08:34,600 --> 00:08:38,250
like onLongClick or onItems.

213
00:08:38,250 --> 00:08:40,620
Whatever, all those things.

214
00:08:40,620 --> 00:08:43,448
onTextChanged is a
real interesting one,

215
00:08:43,448 --> 00:08:44,990
because it's a text
watcher and there

216
00:08:44,990 --> 00:08:48,075
are three handlers on there.

217
00:08:48,075 --> 00:08:50,450
You can just set one of them,
two of them, three of them.

218
00:08:50,450 --> 00:08:53,710
Whatever you want,
it's pretty nice.

219
00:08:53,710 --> 00:08:54,720
How much would you pay?

220
00:08:54,720 --> 00:08:56,740
How much [INAUDIBLE] performance
you would pay for this?

221
00:08:56,740 --> 00:08:57,380
20%?

222
00:08:57,380 --> 00:08:59,710
YGIT BOYAR: No, of course not.

223
00:08:59,710 --> 00:09:01,524
GEORGE MOUNT: 10%?

224
00:09:01,524 --> 00:09:05,177
YGIT BOYAR: Uh, maybe.

225
00:09:05,177 --> 00:09:06,510
GEORGE MOUNT: How about nothing?

226
00:09:06,510 --> 00:09:09,900
YGIT BOYAR: Wow, no way.

227
00:09:09,900 --> 00:09:11,857
He's lying.

228
00:09:11,857 --> 00:09:13,439
GEORGE MOUNT: It
might not be nothing,

229
00:09:13,440 --> 00:09:19,070
depending on how optimal your
code is, but it's pretty good.

230
00:09:19,070 --> 00:09:22,738
I want to bring up my
co-conspirator in this.

231
00:09:22,738 --> 00:09:26,940
Let me introduce
you to Ygit Boyar.

232
00:09:26,940 --> 00:09:29,940
[APPLAUSE]

233
00:09:29,940 --> 00:09:31,096


234
00:09:31,096 --> 00:09:32,221
YGIT BOYAR: Hey, everybody.

235
00:09:32,221 --> 00:09:34,331
I'm Ygit from the
UI Toolkit Team,

236
00:09:34,331 --> 00:09:36,600
I work on data
binding with George.

237
00:09:36,600 --> 00:09:39,560
I'm going to go into some
details on how it actually

238
00:09:39,560 --> 00:09:41,800
works.

239
00:09:41,800 --> 00:09:44,008
As George showed
before the layouts

240
00:09:44,009 --> 00:09:45,300
are a little bit different now.

241
00:09:45,300 --> 00:09:47,469
You have a layout
tag in the root.

242
00:09:47,470 --> 00:09:50,020
This tells us it's
data binding layout.

243
00:09:50,020 --> 00:09:53,620
And we pass it into
the layout grinder,

244
00:09:53,620 --> 00:09:57,270
which processes your layouts,
and then explores a new layout

245
00:09:57,270 --> 00:09:59,560
that the older Android
versions can understand,

246
00:09:59,560 --> 00:10:01,290
which doesn't add a
layout tag anymore,

247
00:10:01,290 --> 00:10:04,040
remove the namespaces
to your first child.

248
00:10:04,040 --> 00:10:06,250
And it also has
some sub-products

249
00:10:06,250 --> 00:10:08,830
from the processing,
it creates a class,

250
00:10:08,830 --> 00:10:11,385
it creates all these public
final fields for your views

251
00:10:11,385 --> 00:10:16,510
with IDs, and it creates the
setters for your variables.

252
00:10:16,510 --> 00:10:19,970
Going into detail, this is
what actually is happening.

253
00:10:19,970 --> 00:10:22,480
We move that namespace
to her first child,

254
00:10:22,480 --> 00:10:23,886
get rid of the layout tag.

255
00:10:23,886 --> 00:10:25,510
And this is done
while your application

256
00:10:25,510 --> 00:10:26,520
is compiled by Gradle.

257
00:10:26,520 --> 00:10:29,210


258
00:10:29,210 --> 00:10:33,410
And then we remove your
expressions add some tag there

259
00:10:33,410 --> 00:10:36,260
so we can find those
[INAUDIBLE] afterwards.

260
00:10:36,260 --> 00:10:38,950
If you had an ID we would
keep it there, and also

261
00:10:38,950 --> 00:10:41,357
create the vies.

262
00:10:41,357 --> 00:10:43,689
As you can see there directly
matching this public file.

263
00:10:43,690 --> 00:10:46,210
You don't need to cast anymore
because we know what type it

264
00:10:46,210 --> 00:10:48,770
is at compile time, so we
just create the variable

265
00:10:48,770 --> 00:10:49,560
with that type.

266
00:10:49,560 --> 00:10:53,000


267
00:10:53,000 --> 00:10:54,830
So, how do we do this?

268
00:10:54,830 --> 00:10:56,710
One important aspect
of data binding

269
00:10:56,710 --> 00:10:59,280
is that almost everything
is done at compile time.

270
00:10:59,280 --> 00:11:02,060
So when we see an
expression like this we--

271
00:11:02,060 --> 00:11:04,800
while your Java code
is being compiled,

272
00:11:04,800 --> 00:11:07,430
we go check, &quot;OK,
this product, we

273
00:11:07,430 --> 00:11:09,489
know what type it is
because you told us.&quot;

274
00:11:09,490 --> 00:11:13,381
Now we say, &quot;OK product is
an image field or an image

275
00:11:13,381 --> 00:11:13,880
getter.&quot;

276
00:11:13,880 --> 00:11:17,610
We will look for these things.

277
00:11:17,610 --> 00:11:20,160
OK, here we found there
is a drawable returning

278
00:11:20,160 --> 00:11:21,135
getImage method.

279
00:11:21,135 --> 00:11:23,830
Then we check, OK,
I have a drawable,

280
00:11:23,830 --> 00:11:25,240
there is a source attributes.

281
00:11:25,240 --> 00:11:27,990
Can I set this drawable
to the source attribute?

282
00:11:27,990 --> 00:11:30,920
And then we call
set source there.

283
00:11:30,920 --> 00:11:33,030
The cool part is, we
don't need any reflection

284
00:11:33,030 --> 00:11:35,240
to do any of these
things because we do it

285
00:11:35,240 --> 00:11:36,200
at compile time.

286
00:11:36,200 --> 00:11:37,790
So at runtime it is
equal to the code

287
00:11:37,790 --> 00:11:39,260
that you would write yourself.

288
00:11:39,260 --> 00:11:40,180
GEORGE MOUNT: Hey wait
a second, I thought

289
00:11:40,180 --> 00:11:41,959
all databyte [INAUDIBLE]
frameworks needed reflection,

290
00:11:41,960 --> 00:11:42,492
don't they?

291
00:11:42,492 --> 00:11:43,699
YGIT BOYAR: Not the new ones.

292
00:11:43,700 --> 00:11:44,825
GEORGE MOUNT: Not this one?

293
00:11:44,825 --> 00:11:46,810
Oh, nice.

294
00:11:46,810 --> 00:11:49,489
YGIT BOYAR: So for
example-- but is not

295
00:11:49,490 --> 00:11:51,740
true that the
examples are simple.

296
00:11:51,740 --> 00:11:55,520
So you can say I have my
variable, said to this text.

297
00:11:55,520 --> 00:11:57,670
Correct, that's straightforward.

298
00:11:57,670 --> 00:11:59,670
It sets the user of that image.

299
00:11:59,670 --> 00:12:00,599
The source.

300
00:12:00,600 --> 00:12:05,091
I call setSrc which I said
before, which does not exist.

301
00:12:05,091 --> 00:12:06,840
So this is a problem
because the ImageView

302
00:12:06,840 --> 00:12:08,560
doesn't have a setSrc method.

303
00:12:08,560 --> 00:12:12,095
It has a source attribute, but
as a setImageDrawable method,

304
00:12:12,096 --> 00:12:13,720
[INAUDIBLE] you can
pass that drawable.

305
00:12:13,720 --> 00:12:16,450
How does data binding
know about this?

306
00:12:16,450 --> 00:12:18,890
It's done by annotation.

307
00:12:18,890 --> 00:12:22,680
So we had this binding method
annotation which-- you can say,

308
00:12:22,680 --> 00:12:26,479
OK, this is a binding annotation
for a type class ImageView

309
00:12:26,480 --> 00:12:29,110
that attribute a source
and the method is

310
00:12:29,110 --> 00:12:30,690
called setImageDrawable.

311
00:12:30,690 --> 00:12:34,030
So we know that at the resource
maps are setImageDrawable,

312
00:12:34,030 --> 00:12:37,709
if the pass parameters
match we can use that method

313
00:12:37,710 --> 00:12:38,670
to run the binding.

314
00:12:38,670 --> 00:12:41,650
Again, this is done
in the compile time.

315
00:12:41,650 --> 00:12:43,829
What we generate
is the same code

316
00:12:43,830 --> 00:12:47,290
that you will do at
setImageDrawable.

317
00:12:47,290 --> 00:12:48,480
[INAUDIBLE] event handler.

318
00:12:48,480 --> 00:12:53,270
These are a little tricky
because unfortunately Java 7

319
00:12:53,270 --> 00:12:57,310
didn't have any function
parameters, you cannot do them.

320
00:12:57,310 --> 00:13:00,900
So the way this
works is, we know

321
00:13:00,900 --> 00:13:03,040
there's a binding method
that says onClick.

322
00:13:03,040 --> 00:13:05,430
Method setOnClickListner.

323
00:13:05,430 --> 00:13:07,770
OK, what does the
setOnClickListener expect?

324
00:13:07,770 --> 00:13:11,300
It expects a [INAUDIBLE]
.onClickListener

325
00:13:11,300 --> 00:13:13,370
that's an interface or
[INAUDIBLE] and then

326
00:13:13,370 --> 00:13:16,180
the interface has one method.

327
00:13:16,180 --> 00:13:20,000
Now if you look for
that handler.clicked

328
00:13:20,000 --> 00:13:22,900
matches that one method.

329
00:13:22,900 --> 00:13:25,242
Going into the
details, we saw this.

330
00:13:25,242 --> 00:13:27,910


331
00:13:27,910 --> 00:13:32,719
Nice, that the handler.clicked
method receives a view

332
00:13:32,720 --> 00:13:35,900
and this matches so we
create the interface for you

333
00:13:35,900 --> 00:13:39,959
so that Java is happy,
and you're going to tunnel

334
00:13:39,960 --> 00:13:43,330
those calls to our handler.

335
00:13:43,330 --> 00:13:45,170
So you can see
everything is matching.

336
00:13:45,170 --> 00:13:47,540
It just works.

337
00:13:47,540 --> 00:13:49,733
GEORGE MOUNT: You're
stealing my thunder here.

338
00:13:49,734 --> 00:13:51,150
Let's talk about
binding adapters.

339
00:13:51,150 --> 00:13:53,066
Binding adapters are
probably the coolest part

340
00:13:53,066 --> 00:13:54,611
about data binding.

341
00:13:54,611 --> 00:13:56,360
So let's talk about
something a little bit

342
00:13:56,360 --> 00:13:57,700
more complicated than setText.

343
00:13:57,700 --> 00:14:00,120
SetText was a nice
automatic variable.

344
00:14:00,120 --> 00:14:02,210
You can just setText,
it takes in a string--

345
00:14:02,210 --> 00:14:05,450
or, actually to setText
takes in an char sequence

346
00:14:05,450 --> 00:14:07,087
but it's pretty close.

347
00:14:07,087 --> 00:14:08,920
Let's talk about something
more interesting.

348
00:14:08,920 --> 00:14:12,930
We have this ImageView
but we have a large URL,

349
00:14:12,930 --> 00:14:14,459
large image data coming down.

350
00:14:14,460 --> 00:14:17,030
And if we do this,
what's going to happen--

351
00:14:17,030 --> 00:14:18,660
we don't want this
on the UI thread.

352
00:14:18,660 --> 00:14:20,617
It's going to load
everything on the UI thread.

353
00:14:20,618 --> 00:14:22,970
That that's pretty
lousy, I don't like that.

354
00:14:22,970 --> 00:14:24,820
So instead, I'm
going to use a tool.

355
00:14:24,820 --> 00:14:26,370
How about Picasso?

356
00:14:26,370 --> 00:14:26,870
Glyde?

357
00:14:26,870 --> 00:14:28,700
What's your favorite?

358
00:14:28,700 --> 00:14:31,439
YGIT BOYAR: I'd
rather not say that.

359
00:14:31,439 --> 00:14:32,980
GEORGE MOUNT: In
this example whoever

360
00:14:32,980 --> 00:14:35,229
it was who wrote this
expression tried to use Picasso,

361
00:14:35,229 --> 00:14:39,550
but my goodness, Picasso
with context-- that's

362
00:14:39,550 --> 00:14:42,270
a heck of an expression,
and into what do you--

363
00:14:42,270 --> 00:14:44,689
I don't know.

364
00:14:44,690 --> 00:14:47,000
That's lousy.

365
00:14:47,000 --> 00:14:48,880
I don't like this.

366
00:14:48,880 --> 00:14:51,150
We don't want to see that
in our expressions anyway.

367
00:14:51,150 --> 00:14:53,002
So let's do something
else simpler.

368
00:14:53,002 --> 00:14:55,459
Instead, what we're going to
do is create a binding adapter

369
00:14:55,460 --> 00:14:57,610
and we're going to use
the Android source.

370
00:14:57,610 --> 00:15:00,180
We're going to override
what the default behavior is

371
00:15:00,180 --> 00:15:01,358
with our binding adapter.

372
00:15:01,359 --> 00:15:02,900
And instead of doing
the normal stuff

373
00:15:02,900 --> 00:15:03,920
we're going to try to
do something special.

374
00:15:03,920 --> 00:15:06,300
So what we're going to do
is set this binding adapter,

375
00:15:06,300 --> 00:15:09,680
and of course this is an
attribute, an annotation

376
00:15:09,680 --> 00:15:12,189
on our static method here.

377
00:15:12,190 --> 00:15:14,220
And it could be any
static method anywhere.

378
00:15:14,220 --> 00:15:16,640
And we're just going to
look for that static method

379
00:15:16,640 --> 00:15:19,370
with the attribute,
the annotation.

380
00:15:19,370 --> 00:15:23,250
And here we're going to look for
something that is an ImageView

381
00:15:23,250 --> 00:15:25,850
and it takes in a
string as a parameter.

382
00:15:25,850 --> 00:15:29,690
And now what we can do is do
anything we want in that class.

383
00:15:29,690 --> 00:15:32,650
So we have this nice Picasso.

384
00:15:32,650 --> 00:15:34,770
We can use their
context from the view.

385
00:15:34,770 --> 00:15:37,210
We can load the image
in there, and it

386
00:15:37,210 --> 00:15:38,980
can be done all
off the UI thread,

387
00:15:38,980 --> 00:15:40,960
and it's all kind of magic.

388
00:15:40,960 --> 00:15:43,250
Now you can do image source
is equal to some value,

389
00:15:43,250 --> 00:15:45,380
it's great.

390
00:15:45,380 --> 00:15:47,630
But what if you want to do
something more interesting.

391
00:15:47,630 --> 00:15:50,260
Let's imagine you want
to have a placeholder

392
00:15:50,260 --> 00:15:51,130
for your annotation.

393
00:15:51,130 --> 00:15:54,620
Now you have to do this with
Picasso in the same call,

394
00:15:54,620 --> 00:15:57,920
you can't just say,
&quot;in one call it's

395
00:15:57,920 --> 00:15:59,890
called the load in the
other one you do--&quot;

396
00:15:59,890 --> 00:16:01,306
so what we're going
to do is we're

397
00:16:01,306 --> 00:16:04,710
going to merge it all together
into one binding adapter.

398
00:16:04,710 --> 00:16:07,340
This one takes two
kinds of attributes,

399
00:16:07,340 --> 00:16:09,650
and they can work together.

400
00:16:09,650 --> 00:16:11,430
You just take the
parameters in the order

401
00:16:11,430 --> 00:16:14,910
that you've assigned
them in the annotation,

402
00:16:14,910 --> 00:16:17,660
and now you can do whatever
you want in the method.

403
00:16:17,660 --> 00:16:20,310
In this case we're going
to load the URL off-thread,

404
00:16:20,310 --> 00:16:25,229
and in the meantime we'll
load this placeholder image.

405
00:16:25,230 --> 00:16:30,300
[APPLAUSE]

406
00:16:30,300 --> 00:16:33,020
Now sometimes you want to
have some kind of instance

407
00:16:33,020 --> 00:16:35,410
information in your adapter.

408
00:16:35,410 --> 00:16:38,110
And before we were
using static methods.

409
00:16:38,110 --> 00:16:41,545
But what happens if you
want to use an instance?

410
00:16:41,545 --> 00:16:42,920
With the static
method it's easy.

411
00:16:42,920 --> 00:16:43,711
We know what to do.

412
00:16:43,711 --> 00:16:47,670
We can call it directly just
my class static method call.

413
00:16:47,670 --> 00:16:50,490
Very simple to do in the
generated binding class

414
00:16:50,490 --> 00:16:51,070
that we have.

415
00:16:51,070 --> 00:16:53,000
YGIT BOYAR: How do
you get the instance?

416
00:16:53,000 --> 00:16:58,480
GEORGE MOUNT: So we take
out the static what happens?

417
00:16:58,480 --> 00:17:00,720
Where does that
instance come from?

418
00:17:00,720 --> 00:17:02,240
Some kind of instance.

419
00:17:02,240 --> 00:17:06,990
So what we're going to do
is-- the binding framework

420
00:17:06,990 --> 00:17:09,550
is going to look and see, &quot;Oh,
this is an instance binding

421
00:17:09,550 --> 00:17:10,098
adapter.

422
00:17:10,098 --> 00:17:13,010
We need to generate this
method on this class, this data

423
00:17:13,010 --> 00:17:14,298
binding component class.&quot;

424
00:17:14,298 --> 00:17:15,839
And this method is
going to be called

425
00:17:15,839 --> 00:17:21,179
get whatever the name of
your adapter class is.

426
00:17:21,180 --> 00:17:25,280
And now it's your
job to implement

427
00:17:25,280 --> 00:17:26,317
to implement this class.

428
00:17:26,317 --> 00:17:28,150
So you've been with
this class, and then you

429
00:17:28,150 --> 00:17:30,300
call setDefaultComponent on it.

430
00:17:30,300 --> 00:17:31,930
Now, there's also
ones if you want

431
00:17:31,930 --> 00:17:34,080
to load a specific
implementation

432
00:17:34,080 --> 00:17:37,044
for a specific
binding if you want.

433
00:17:37,045 --> 00:17:38,420
But most of the
time you probably

434
00:17:38,420 --> 00:17:41,660
want just the default component
that you're going to load.

435
00:17:41,660 --> 00:17:45,170
Then we know exactly
what instance

436
00:17:45,170 --> 00:17:51,020
we're going to load for
your binding adapter.

437
00:17:51,020 --> 00:17:52,652
Very nice.

438
00:17:52,652 --> 00:17:54,360
Now you can also do
this with components.

439
00:17:54,360 --> 00:17:56,068
Now when you're doing
it with a component

440
00:17:56,068 --> 00:17:58,850
if you have some kind of
state you want to get.

441
00:17:58,850 --> 00:18:02,129
Imagine this is a cache
for your images, right?

442
00:18:02,130 --> 00:18:05,330
So you want to load the image
from your cache first, and then

443
00:18:05,330 --> 00:18:08,040
possibly load off-thread.

444
00:18:08,040 --> 00:18:12,850
In this case we need to
go what that instance is.

445
00:18:12,850 --> 00:18:15,042
Where we're going to pass
it as a static method,

446
00:18:15,042 --> 00:18:16,750
but we want to have
some kind of instance

447
00:18:16,750 --> 00:18:17,940
that we're going to
share around to all

448
00:18:17,940 --> 00:18:19,570
the different binding adapters.

449
00:18:19,570 --> 00:18:25,280
So in this case we need to
know what that state is.

450
00:18:25,280 --> 00:18:28,220
So in this case you implement
your data binding component

451
00:18:28,220 --> 00:18:30,840
but you add your
own method to it.

452
00:18:30,840 --> 00:18:31,439
OK?

453
00:18:31,440 --> 00:18:32,600
So when you had your
own method to it,

454
00:18:32,600 --> 00:18:33,949
we don't know anything
about this method,

455
00:18:33,950 --> 00:18:35,780
this is something
that you know about.

456
00:18:35,780 --> 00:18:38,590
But we're going to pass it to
you as the first parameter,

457
00:18:38,590 --> 00:18:40,330
if you'd like.

458
00:18:40,330 --> 00:18:42,560
Now, you can do
whatever you want.

459
00:18:42,560 --> 00:18:48,100
So we have our own cache here
that we can load our data from.

460
00:18:48,100 --> 00:18:51,099
Let's talk a little bit
about best practices.

461
00:18:51,099 --> 00:18:52,889
YGIT BOYAR: Let's go
through some examples.

462
00:18:52,890 --> 00:18:53,720
GEORGE MOUNT: They say
practice makes perfect.

463
00:18:53,720 --> 00:18:54,125
YGIT BOYAR: Practice.

464
00:18:54,125 --> 00:18:55,350
GEORGE MOUNT: Practice, man.

465
00:18:55,350 --> 00:18:57,149
YGIT BOYAR: [LAUGHS]
Internal joke, sorry.

466
00:18:57,150 --> 00:19:00,220


467
00:19:00,220 --> 00:19:03,390
Let's look at some examples.

468
00:19:03,390 --> 00:19:07,600
Data binding allows you to write
some explorations in the XML.

469
00:19:07,600 --> 00:19:11,629
That means I can just send a
web service call from my XML,

470
00:19:11,630 --> 00:19:12,130
right?

471
00:19:12,130 --> 00:19:12,590
Why not?

472
00:19:12,590 --> 00:19:13,630
There's a click listener.

473
00:19:13,631 --> 00:19:14,460
There's an API.

474
00:19:14,460 --> 00:19:16,210
Why should I not do this?

475
00:19:16,210 --> 00:19:17,170
You should not do this.

476
00:19:17,170 --> 00:19:20,950
If you do this, your
application will break.

477
00:19:20,950 --> 00:19:22,540
This is not what
data binding is for.

478
00:19:22,540 --> 00:19:26,720
Data binding and is to put data
into your UI from your model.

479
00:19:26,720 --> 00:19:29,132
So instead of doing
that, have a call

480
00:19:29,132 --> 00:19:33,080
back, have a presenter,
whatever model you prefer.

481
00:19:33,080 --> 00:19:36,210
Just [INAUDIBLE]
the call to the Java

482
00:19:36,210 --> 00:19:37,850
when you do the real thing.

483
00:19:37,850 --> 00:19:40,260
Don't try to do business
logic tree here or something.

484
00:19:40,260 --> 00:19:43,430
Its not going to work.

485
00:19:43,430 --> 00:19:47,290
Another example in a
good way is that, I

486
00:19:47,290 --> 00:19:52,200
want to change this drawable
based on the users [INAUDIBLE]

487
00:19:52,200 --> 00:19:53,453
just reacted.

488
00:19:53,453 --> 00:19:55,180
In that case it's fine.

489
00:19:55,180 --> 00:19:58,370
Just what the eye sees is
a super simple expression.

490
00:19:58,370 --> 00:20:02,370
That's OK, because here's an
advantage, when I look at this

491
00:20:02,370 --> 00:20:05,121
here it's OK, I know that
if the age is this UI

492
00:20:05,122 --> 00:20:06,510
shows this drawable.

493
00:20:06,510 --> 00:20:08,370
Otherwise the other
one is very clear,

494
00:20:08,370 --> 00:20:10,739
it makes my example
better, my code cleaner.

495
00:20:10,740 --> 00:20:11,990
So this is OK.

496
00:20:11,990 --> 00:20:13,950
So you have to decide
it for yourself.

497
00:20:13,950 --> 00:20:19,070
Well, if you do something like
this, [INAUDIBLE] redact it.

498
00:20:19,070 --> 00:20:21,409
I don't understand what this
code is doing when I look

499
00:20:21,410 --> 00:20:23,050
at it, then there's a problem.

500
00:20:23,050 --> 00:20:25,190
It doesn't make sense.

501
00:20:25,190 --> 00:20:28,190
Instead of doing it,
there's something simpler.

502
00:20:28,190 --> 00:20:31,730
If the age is this, the
displayName otherwise redacted.

503
00:20:31,730 --> 00:20:34,820
And the displayName
comes from your model.

504
00:20:34,820 --> 00:20:37,810
If your object doesn't
really have that field, which

505
00:20:37,810 --> 00:20:40,287
it doesn't in this case,
you create a view model

506
00:20:40,287 --> 00:20:41,870
that provides that
information, or you

507
00:20:41,870 --> 00:20:44,100
can make the variable
for your binding layout.

508
00:20:44,100 --> 00:20:46,829
GEORGE MOUNT: I think you took
that from my code, I'm sorry.

509
00:20:46,829 --> 00:20:48,120
YGIT BOYAR: It's not very good.

510
00:20:48,120 --> 00:20:49,790
He got data binding wrong.

511
00:20:49,790 --> 00:20:50,540
GEORGE MOUNT: Hey!

512
00:20:50,540 --> 00:20:53,899


513
00:20:53,900 --> 00:20:55,930
YGIT BOYAR: So if
your real model

514
00:20:55,930 --> 00:20:58,230
can display [INAUDIBLE]
in this example

515
00:20:58,230 --> 00:21:01,050
we make this
displayName bindable.

516
00:21:01,050 --> 00:21:04,409
In return, data binding is
going to generate this BR clause

517
00:21:04,410 --> 00:21:07,430
similar to the R clause,
but for bindable things.

518
00:21:07,430 --> 00:21:10,700
And when the user's last name
is set you can [INAUDIBLE]

519
00:21:10,700 --> 00:21:12,340
that it has changed
and data binding

520
00:21:12,340 --> 00:21:13,812
will keep the UI up to date.

521
00:21:13,812 --> 00:21:18,232


522
00:21:18,232 --> 00:21:21,410
If you have value objects and
you're directly showing them

523
00:21:21,410 --> 00:21:23,220
in your UI, that's
okay to set them

524
00:21:23,220 --> 00:21:26,860
as variables in your
layout, and set [INAUDIBLE]

525
00:21:26,860 --> 00:21:28,735
your generated binding class.

526
00:21:28,736 --> 00:21:31,110
But if this is not the case,
if you need more information

527
00:21:31,110 --> 00:21:34,389
consider using a view model
where you put this information

528
00:21:34,390 --> 00:21:37,730
there, and you can just use
these observable convenience

529
00:21:37,730 --> 00:21:40,120
fields we provide
your view models.

530
00:21:40,120 --> 00:21:41,870
You just set them
and data binding

531
00:21:41,870 --> 00:21:44,949
makes sure of that they
are visible on the UI.

532
00:21:44,950 --> 00:21:48,000
By the way, observables
like those convenience

533
00:21:48,000 --> 00:21:50,000
observable classes
we provide, they're

534
00:21:50,000 --> 00:21:52,690
nice if there are very few.

535
00:21:52,690 --> 00:21:55,550
If you tried to make your
value objects with those things

536
00:21:55,550 --> 00:21:58,730
you're just using a lot of
my memory for no reason.

537
00:21:58,730 --> 00:21:59,380
Don't do that.

538
00:21:59,380 --> 00:22:01,420
But they're nice if
you have a view model

539
00:22:01,420 --> 00:22:03,310
or you could have
them in your activity

540
00:22:03,310 --> 00:22:06,770
if there's something you
want to easily control.

541
00:22:06,770 --> 00:22:09,060
So there's other
examples where you

542
00:22:09,060 --> 00:22:12,620
write the view model
extending the base observable

543
00:22:12,620 --> 00:22:15,810
class because you don't want to
use those convenient classes.

544
00:22:15,810 --> 00:22:20,679
The same example here, when you
the data changes you notify,

545
00:22:20,680 --> 00:22:24,480
and then data binding
takes care of this.

546
00:22:24,480 --> 00:22:27,060
Or you can implement
observable interface,

547
00:22:27,060 --> 00:22:28,909
now we provide this
program to change

548
00:22:28,910 --> 00:22:32,410
registry class which allows you
to dispatch your [INAUDIBLE].

549
00:22:32,410 --> 00:22:35,500
All they have to do is,
just notify PropertyChange

550
00:22:35,500 --> 00:22:36,700
through that class.

551
00:22:36,700 --> 00:22:38,900
And when we add and
remove callbacks,

552
00:22:38,900 --> 00:22:41,780
just send those
calls to this class

553
00:22:41,780 --> 00:22:45,060
and it will take care of it.

554
00:22:45,060 --> 00:22:48,020
The other part is-- This
is a beautiful example.

555
00:22:48,020 --> 00:22:50,740
I know many people have been
asking for this font editor

556
00:22:50,740 --> 00:22:52,310
within TextView.

557
00:22:52,310 --> 00:22:53,780
There's some reasons for that.

558
00:22:53,780 --> 00:22:56,200
You ask the [INAUDIBLE].

559
00:22:56,200 --> 00:22:58,310
Lisa, I don't know
if she's here,

560
00:22:58,310 --> 00:23:02,100
she's created this thing where
I can set my fonts in XML.

561
00:23:02,100 --> 00:23:04,780
I want to do that,
it is much cleaner.

562
00:23:04,780 --> 00:23:07,836
This became very popular,
I like this example.

563
00:23:07,836 --> 00:23:09,210
The good thing
about this example

564
00:23:09,210 --> 00:23:11,120
is it makes your XML very clean.

565
00:23:11,120 --> 00:23:14,429
You look at it, you understand
what it is trying to do.

566
00:23:14,430 --> 00:23:18,700
There's no added performance
cost in all of these things.

567
00:23:18,700 --> 00:23:20,680
So you write the binding
adapter that says,

568
00:23:20,680 --> 00:23:23,930
I know how to set a
font on a textView.

569
00:23:23,930 --> 00:23:25,950
This is all well defined.

570
00:23:25,950 --> 00:23:28,120
In this code you get the font.

571
00:23:28,120 --> 00:23:29,610
You load the typeface.

572
00:23:29,610 --> 00:23:31,379
Set it on the text view.

573
00:23:31,380 --> 00:23:33,080
If this was a real
application you

574
00:23:33,080 --> 00:23:38,919
would probably cache it so you
don't keep reloading the font.

575
00:23:38,920 --> 00:23:40,620
Beautiful.

576
00:23:40,620 --> 00:23:42,929
Another good example
is the image adapter.

577
00:23:42,930 --> 00:23:46,505
I'm using any image
loader here, Glide.

578
00:23:46,505 --> 00:23:51,315
I could say, this adapter
knows how to set a photo URL

579
00:23:51,315 --> 00:23:55,140
and might have a default
but they're not required.

580
00:23:55,140 --> 00:23:58,480
So that if there is only a
photo URL set on the view

581
00:23:58,480 --> 00:24:01,180
we will still call the adapter
the other value you will see

582
00:24:01,180 --> 00:24:03,570
will be the default value,
which is if it is an object

583
00:24:03,570 --> 00:24:04,850
it will be null.

584
00:24:04,850 --> 00:24:07,070
So an integer will be
zero and all the default

585
00:24:07,070 --> 00:24:09,189
values you can imagine.

586
00:24:09,190 --> 00:24:11,490
This way I can write
just one adapter

587
00:24:11,490 --> 00:24:16,210
that can handle multiple
attribute groups.

588
00:24:16,210 --> 00:24:19,740
And if it is an
instance method you

589
00:24:19,740 --> 00:24:21,810
can just create
this AppComponent

590
00:24:21,810 --> 00:24:24,255
that implants the
DataBindingComponent

591
00:24:24,256 --> 00:24:26,450
and just returns
your image adapter.

592
00:24:26,450 --> 00:24:29,920
This is very nice for testing so
that while the test is running

593
00:24:29,920 --> 00:24:32,470
you can basically set the
default, or do nothing,

594
00:24:32,470 --> 00:24:35,440
because no one wants to
call network during a test

595
00:24:35,440 --> 00:24:38,350
unless you are
testing the network.

596
00:24:38,350 --> 00:24:42,815
So I have this mock version here
that I inject during my test.

597
00:24:42,816 --> 00:24:44,440
And it just does nothing.

598
00:24:44,440 --> 00:24:45,770
It uses the default drawable.

599
00:24:45,770 --> 00:24:50,610


600
00:24:50,610 --> 00:24:54,320
So this works one-on-one
with [INAUDIBLE].

601
00:24:54,320 --> 00:24:59,240
You can just say inject
ImageAdapter, create this app

602
00:24:59,240 --> 00:25:01,917
component and for example,
if you are using Dagger 2

603
00:25:01,917 --> 00:25:03,250
this will take care of the rest.

604
00:25:03,250 --> 00:25:04,980
You don't need to
the anything else

605
00:25:04,980 --> 00:25:08,470
and this is a Dagger 2
implementation where we always

606
00:25:08,470 --> 00:25:11,280
say-- We create the
model for the stuff,

607
00:25:11,280 --> 00:25:14,510
and we implement
this, and then Dagger

608
00:25:14,510 --> 00:25:18,310
generates the rest of the code
assuming that you provided it.

609
00:25:18,310 --> 00:25:19,992
And thank you.

610
00:25:19,992 --> 00:25:23,120
[APPLAUSE]

611
00:25:23,120 --> 00:25:26,319


612
00:25:26,319 --> 00:25:28,110
GEORGE MOUNT: We were
super fast so we have

613
00:25:28,110 --> 00:25:30,250
time for lots of questions!

614
00:25:30,250 --> 00:25:33,040
YGIT BOYAR: There are two
microphones left and right.

615
00:25:33,040 --> 00:25:34,735
Please use them
to ask questions.

616
00:25:34,735 --> 00:25:48,510


617
00:25:48,510 --> 00:25:54,310
AUDIENCE: Hi, my question is
about when you use data binding

618
00:25:54,310 --> 00:25:58,710
it's not always obvious what's
happening in the UX editor.

619
00:25:58,710 --> 00:26:00,670
If you understand what I mean.

620
00:26:00,670 --> 00:26:04,260
It would be nice to be
able to provide a default

621
00:26:04,260 --> 00:26:09,220
product, or something to mock
so I can see what a UX looks

622
00:26:09,220 --> 00:26:10,954
like in the editor as well.

623
00:26:10,954 --> 00:26:13,120
GEORGE MOUNT: Yeah, that
was one of the first things

624
00:26:13,120 --> 00:26:16,560
that we talked about when we
were talking to the Android

625
00:26:16,560 --> 00:26:17,262
Studio team.

626
00:26:17,262 --> 00:26:19,220
And they were really
excited about data binding

627
00:26:19,220 --> 00:26:23,250
but as you saw in
the last talk, they

628
00:26:23,250 --> 00:26:25,730
are working on some pretty
exciting things right now.

629
00:26:25,730 --> 00:26:29,930
And so they're going to get to
it but they're not there yet.

630
00:26:29,930 --> 00:26:31,870
YGIT BOYAR: I can tell
that code completion is

631
00:26:31,870 --> 00:26:34,070
coming this way of course.

632
00:26:34,070 --> 00:26:35,530
That's good news
for data binding.

633
00:26:35,530 --> 00:26:37,379
And that's one of the
things we should do.

634
00:26:37,380 --> 00:26:42,890


635
00:26:42,890 --> 00:26:45,610
AUDIENCE: Is it possible
to inflate ViewStub

636
00:26:45,610 --> 00:26:48,046
according to data binding?

637
00:26:48,047 --> 00:26:49,880
GEORGE MOUNT: You said,
&quot;Inflate new stuff&quot;?

638
00:26:49,880 --> 00:26:50,730
AUDIENCE: ViewStub.

639
00:26:50,730 --> 00:26:55,460
GEORGE MOUNT: Oh yes, there's
a special implementation

640
00:26:55,460 --> 00:27:01,320
for ViewStub because as you
saw we have final classes--

641
00:27:01,320 --> 00:27:02,990
final fields.

642
00:27:02,990 --> 00:27:06,090
So we have a ViewStub
proxy final field for that.

643
00:27:06,090 --> 00:27:09,409
Because ViewStub actually
replaces itself with a view.

644
00:27:09,410 --> 00:27:11,922
So we can't do a replacement
for a final field, right?

645
00:27:11,922 --> 00:27:13,380
So we have a ViewStub
proxy and you

646
00:27:13,380 --> 00:27:18,730
can get either the view, or
the replaced view with it

647
00:27:18,730 --> 00:27:20,870
depending on its status.

648
00:27:20,870 --> 00:27:25,489
AUDIENCE: OK, and it is
possible to parse the data model

649
00:27:25,490 --> 00:27:28,040
to underlying [INAUDIBLE].

650
00:27:28,040 --> 00:27:32,000
YGIT BOYAR: Yes, you
us the same expression

651
00:27:32,000 --> 00:27:34,320
as if you are
passing an attribute.

652
00:27:34,320 --> 00:27:36,936
And if there's a
binding for that class

653
00:27:36,936 --> 00:27:39,330
we know to create the
binding for that class

654
00:27:39,330 --> 00:27:42,502
and pass that variable
as the variable changes.

655
00:27:42,502 --> 00:27:45,770
AUDIENCE: Cool, thank you.

656
00:27:45,770 --> 00:27:48,520
AUDIENCE: Hello, the
current design tab

657
00:27:48,520 --> 00:27:51,070
inside Android Studio sometimes
doesn't render the layout

658
00:27:51,070 --> 00:27:51,810
correctly.

659
00:27:51,810 --> 00:27:54,510
Sometimes there is just a black
screen or something like this.

660
00:27:54,510 --> 00:27:57,379
Are you going to improve this
and will its work with data

661
00:27:57,380 --> 00:27:58,524
binding also?

662
00:27:58,524 --> 00:27:59,939
GEORGE MOUNT: So
we are constantly

663
00:27:59,940 --> 00:28:03,410
improving the Android
Studio layout editor.

664
00:28:03,410 --> 00:28:05,760
So that's going to get
better and better over time,

665
00:28:05,760 --> 00:28:06,610
absolutely.

666
00:28:06,610 --> 00:28:09,139
AUDIENCE: OK, thank you.

667
00:28:09,140 --> 00:28:11,550
AUDIENCE: I was wondering,
you showed the image

668
00:28:11,550 --> 00:28:13,210
loading examples.

669
00:28:13,210 --> 00:28:15,580
How would you go about
canceling the loads when

670
00:28:15,580 --> 00:28:18,659
your UI is torn down somewhere.

671
00:28:18,660 --> 00:28:22,790
YGIT BOYAR: You have the
binding so you can model it--

672
00:28:22,790 --> 00:28:25,389
so for example you
create the binding--

673
00:28:25,390 --> 00:28:27,100
what you are trying
to cancel is--

674
00:28:27,100 --> 00:28:29,600
let's say you are trying
to load user image URL,

675
00:28:29,600 --> 00:28:32,370
and then the image
URL disappeared or--

676
00:28:32,370 --> 00:28:34,969
AUDIENCE: No, I mean like in
Picasso, you can pass a tag

677
00:28:34,970 --> 00:28:38,400
and then cancel every loads
on those tags for example,

678
00:28:38,400 --> 00:28:41,707
when your fragment goes
away, or something like that.

679
00:28:41,707 --> 00:28:44,040
YGIT BOYAR: One option would
be passing that tag as well

680
00:28:44,040 --> 00:28:45,692
to the binding adapter.

681
00:28:45,692 --> 00:28:47,540
Now you can cancel
through Picasso.

682
00:28:47,540 --> 00:28:50,530
Or if there's some
variable in your model

683
00:28:50,530 --> 00:28:53,230
that can control that then,
again, the binding adapter

684
00:28:53,230 --> 00:28:54,550
can handle the canceling.

685
00:28:54,550 --> 00:28:57,250
AUDIENCE: OK, but it's
not really a callback

686
00:28:57,250 --> 00:28:58,102
for tearing down--

687
00:28:58,102 --> 00:29:00,310
YGIT BOYAR: You can pass a
callback variable if want.

688
00:29:00,310 --> 00:29:04,546
For the view tearing
down-- You know

689
00:29:04,546 --> 00:29:06,920
when the view is going away
through the Android view life

690
00:29:06,920 --> 00:29:09,400
cycle, and there
are callback methods

691
00:29:09,400 --> 00:29:11,520
that you can assign
to this binding class.

692
00:29:11,520 --> 00:29:15,575
You can even say, &quot;Hey
stop, don't rebind.&quot;

693
00:29:15,575 --> 00:29:19,010
The mandated changes
generated by the binding class

694
00:29:19,010 --> 00:29:21,980
calls your callback,
&quot;I'm about to re-bind.&quot;

695
00:29:21,980 --> 00:29:23,180
And now you can say, &quot;No.

696
00:29:23,180 --> 00:29:23,680
Stop.

697
00:29:23,680 --> 00:29:24,370
Don't re-bind.&quot;

698
00:29:24,370 --> 00:29:27,351
When you say that you are
responsible to tell it

699
00:29:27,352 --> 00:29:28,560
to re-bind whenever you want.

700
00:29:28,560 --> 00:29:32,300
Which is very useful if you are
using inside the RecyclerVIew.

701
00:29:32,300 --> 00:29:35,240
Recycler gets really upset if
you update the views themselves

702
00:29:35,240 --> 00:29:36,360
directly.

703
00:29:36,360 --> 00:29:38,709
So if you're at the
RecyclerView.Adapter you say,

704
00:29:38,710 --> 00:29:42,630
&quot;Don't change. &quot; And in runs it
through the RevyclerlViews like

705
00:29:42,630 --> 00:29:44,351
item change flaw.

706
00:29:44,351 --> 00:29:46,350
AUDIENCE: OK, I think
that answers my questions.

707
00:29:46,350 --> 00:29:50,879


708
00:29:50,880 --> 00:29:54,182
AUDIENCE: What's the best way
to debug the expressions that

709
00:29:54,182 --> 00:29:55,140
are in the view markup?

710
00:29:55,140 --> 00:29:57,800


711
00:29:57,800 --> 00:30:00,700
Because it's logic effectively
and so if there's a bug

712
00:30:00,700 --> 00:30:01,533
how do you debug it.

713
00:30:01,533 --> 00:30:03,069
How do you step through it?

714
00:30:03,069 --> 00:30:05,610
YGIT BOYAR: Well, you can't step
through the code, the source

715
00:30:05,610 --> 00:30:08,520
code that we generate is
actually visible to you.

716
00:30:08,520 --> 00:30:11,810
It's generated and you can
step through it if you need to.

717
00:30:11,810 --> 00:30:14,690
It's a little bit
on the uglier side

718
00:30:14,690 --> 00:30:18,250
because it's generated code,
but you can't step through it.

719
00:30:18,250 --> 00:30:20,940


720
00:30:20,940 --> 00:30:23,710
You should try to limit what
your expressions look like.

721
00:30:23,710 --> 00:30:27,260
Now we have some things that
make it a lot easier for you

722
00:30:27,260 --> 00:30:28,660
so that you have fewer bugs.

723
00:30:28,660 --> 00:30:32,110
For example, we have a
no coalescent operator

724
00:30:32,110 --> 00:30:35,399
which-- those of you who
have used other languages

725
00:30:35,400 --> 00:30:37,420
know what this is,
but essentially-- says

726
00:30:37,420 --> 00:30:41,600
if the first part is null
then use the second part.

727
00:30:41,600 --> 00:30:44,679
And we also automatically
do null checks

728
00:30:44,680 --> 00:30:46,240
on your expressions.

729
00:30:46,240 --> 00:30:49,440
So if any part of it is null
then the resultant value

730
00:30:49,440 --> 00:30:50,450
is a default value.

731
00:30:50,450 --> 00:30:53,830
So if you call setText
on user.name then,

732
00:30:53,830 --> 00:30:58,980
if user is null, then the
whole expression is null.

733
00:30:58,980 --> 00:31:03,590
You'll see fewer bugs from that.

734
00:31:03,590 --> 00:31:06,169
Like in the best practices you
should limit your expressions

735
00:31:06,170 --> 00:31:07,650
so they're not too complicated.

736
00:31:07,650 --> 00:31:08,900
AUDIENCE: Yeah, I would agree.

737
00:31:08,900 --> 00:31:09,836
Thanks.

738
00:31:09,836 --> 00:31:10,565
AUDIENCE: Hello.

739
00:31:10,565 --> 00:31:15,610
When we're using data binding
with recycle views actually,

740
00:31:15,610 --> 00:31:18,810
the documentation
says that we should--

741
00:31:18,810 --> 00:31:21,200
after passing the view
to the view holder

742
00:31:21,200 --> 00:31:22,815
and get the binding clause.

743
00:31:22,815 --> 00:31:24,565
We should use as a
executePendingBindings.

744
00:31:24,565 --> 00:31:27,076


745
00:31:27,076 --> 00:31:28,700
I want to know exactly
what is it like,

746
00:31:28,700 --> 00:31:30,283
because I'll tried
to use on list view

747
00:31:30,283 --> 00:31:33,350
and didn't call that
method and it worked fine.

748
00:31:33,350 --> 00:31:38,490
YGIT BOYAR: It will work fine
but it will-- As the variables

749
00:31:38,490 --> 00:31:42,090
change we don't instantly
go and update the views.

750
00:31:42,090 --> 00:31:46,669
What data binding does
is we just keep track

751
00:31:46,670 --> 00:31:49,650
and wait until the next
animation frame happens.

752
00:31:49,650 --> 00:31:51,804
This helps us to run
less explorations

753
00:31:51,804 --> 00:31:52,970
because it's more efficient.

754
00:31:52,970 --> 00:31:55,936
Plus you can change
your data on any thread.

755
00:31:55,936 --> 00:31:57,560
You don't need to be
on the main thread

756
00:31:57,560 --> 00:31:59,370
while changing your
data, and data binding

757
00:31:59,370 --> 00:32:02,030
will take care of moving
it to the main thread.

758
00:32:02,030 --> 00:32:05,170
Now the way this works is you
wait until the next animation

759
00:32:05,170 --> 00:32:05,950
frame.

760
00:32:05,950 --> 00:32:09,030
From a recycler perspective
for the list view, what it does

761
00:32:09,030 --> 00:32:11,340
is it calls your own
bind method and it

762
00:32:11,340 --> 00:32:14,949
expects the view to be updated
when that method returns.

763
00:32:14,950 --> 00:32:16,900
So if there's any
TextView that you

764
00:32:16,900 --> 00:32:19,050
should set that takes
when that happens,

765
00:32:19,050 --> 00:32:21,740
otherwise the view won't
be measured properly.

766
00:32:21,740 --> 00:32:23,600
The first layout will be wrong.

767
00:32:23,600 --> 00:32:28,080
The next animation frame, data
binding will update that view.

768
00:32:28,080 --> 00:32:30,270
This is going to cause
another layout which

769
00:32:30,270 --> 00:32:31,570
will correct itself.

770
00:32:31,570 --> 00:32:33,720
It looked like it worked
fine, but it actually

771
00:32:33,720 --> 00:32:35,570
did two layouts for no reason.

772
00:32:35,570 --> 00:32:37,860
So you by calling
executePendingBindings,

773
00:32:37,860 --> 00:32:42,899
you sync all the
VFs with your model

774
00:32:42,900 --> 00:32:45,880
so that data binding is not
going to request another layout

775
00:32:45,880 --> 00:32:48,825
and the ListView or RecyclerView
will run the proper layout

776
00:32:48,825 --> 00:32:49,366
calculations.

777
00:32:49,366 --> 00:32:52,050


778
00:32:52,050 --> 00:32:54,889
AUDIENCE: So, the last one.

779
00:32:54,890 --> 00:32:58,630
When you're importing variables
such as Android-- the base

780
00:32:58,630 --> 00:33:01,310
class to use an
expression-- I want

781
00:33:01,310 --> 00:33:03,129
to know if on the
new Android Studio

782
00:33:03,130 --> 00:33:05,960
we actually have error
fix because if you

783
00:33:05,960 --> 00:33:08,352
try to do that expression
of setting visibility,

784
00:33:08,352 --> 00:33:11,715
it actually shows you an
error, even after compiling.

785
00:33:11,715 --> 00:33:14,120
So I want to know if that's
fixed on Android Studios?

786
00:33:14,120 --> 00:33:15,250
GEORGE MOUNT: You
said for compiling?

787
00:33:15,250 --> 00:33:17,000
I shouldn't show you
errors for compiling.

788
00:33:17,000 --> 00:33:18,488
YGIT BOYAR: It
does show an error.

789
00:33:18,488 --> 00:33:21,260
It's a very detailed problem.

790
00:33:21,260 --> 00:33:24,298
While parsing your
expressions we use ANTLR.

791
00:33:24,298 --> 00:33:27,930
We say grammer parser
is very popular.

792
00:33:27,930 --> 00:33:30,870
That model doesn't
work on IntelliJ.

793
00:33:30,870 --> 00:33:35,679
IntelliJ suggests using
another parser called JFlex.

794
00:33:35,680 --> 00:33:39,200
So sometimes these grammars
don't match properly.

795
00:33:39,200 --> 00:33:42,220
So if you have a bug just report
it and we will try to fix it.

796
00:33:42,220 --> 00:33:44,130
We are working on some
other solutions that

797
00:33:44,130 --> 00:33:46,365
will allow us to use ANTLR
parser inside IntelliJ

798
00:33:46,365 --> 00:33:49,343
but there are fundamental
different models,

799
00:33:49,343 --> 00:33:51,343
so it's not very [INAUDIBLE],
but we are working

800
00:33:51,343 --> 00:33:52,932
on making it more reliable.

801
00:33:52,932 --> 00:33:56,730


802
00:33:56,730 --> 00:33:58,330
GEORGE MOUNT: All
right, thank you.

803
00:33:58,330 --> 00:34:00,429
[APPLAUSE]

804
00:34:00,430 --> 00:34:04,080
[MUSIC PLAYING]

805
00:34:04,080 --> 00:34:11,087


